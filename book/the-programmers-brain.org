* 프로그래머의 뇌
** 옮긴이 머리말
** 추천의 글
** 베타리더 후기
** 추천서문(존 스키트)
** 시작하며
프로그래밍을 할 때 뇌를 어떤 방식으로 활용하는지 모른다
더 나은 방법으로 코드를 읽거나 작성하기 위해 두뇌를 향상하는 방법을 모른다

프로그래밍을 하는 동안 실수는 수없지 잦다
이러한 오류에는 *인지적 문제* 에 뿌리를 두고있다
- 스페이스를 빼먹었다 => 프로그래밍 언어 문법을 충분히 숙달하지 못함
- 배열의 인덱스를 잘못 계산했다 => 코드에 대한 가정이 잘못되었다
- 기존 코드를 잘못 이해하고 있다 => 코드를 읽는 바법에 대한 기술이 부족하다

이 책의 목적은 두뇌가 코드를 처리하는 방식을 이해하도록 돕는 것
** 감사의 글
** 이 책에 대하여
** 표지에 대하여
** PART I 코드 더 잘 읽기
*** CHAPTER 1 코딩 중 겪는 혼란에 대한 이해
복잡한 알고리즘을 단계적으로 이해하려고 노력할 때 일어나는 혼란과
어떤 특정 영역에서 사용되는 개념을 잘 이해하지 못해서 일어나는 혼란은
*서로 다른 종류* 의 혼란이다
**** 코드가 초래하는 세 가지 종류의 혼란
***** 혼란의 첫 번째 유형: 지식의 부족
코드가 혼란스러운 이유는 T(키워드)에 대한 지식(knowledge)이 없기 때문이다
***** 혼란의 두 번째 유형: 정보의 부족
메서드에 대한 정보(information)이 부족하다
***** 혼란의 세 번째 유형: 처리 능력의 부족
처리 능력(processing power)가 부족하다
- 변수에 임시로 저장되는 값을 모두 다 기억하거나
- 각각의 경우 어떤 동작들이 수행되는지 동시에 알기가 쉽지 않다
**** 코딩에 영향을 주는 인지 과정
첫번째 유형: 장기기억공간(LTM)의 문제
두번째 유형: 단기기억공간(STM)의 문제
세번째 유형: 작업기억공간(working memory)의 문제
***** LTM과 프로그래밍
***** STM과 프로그래밍
***** 작업 기억 공간과 프로그래밍
트레이싱
- 머릿속에서 코드를 컴파일하고 실행하는 과정

작업 기억 공간
- 트레이스를 하거나 인지적으로 복잡한 작업을 할 때 사용되는 두뇌
**** 인지 과정들의 상호작용
LTM: 오랜 시간에 걸쳐 얻은 정보를 저장하는 장소
STM: 방금 전에 읽거나 들은 정보를 일시적으로 저장하는 장소
작업기억공간: 정보를 처리하고 새로운 사고작용을 형성하는 장소
***** 인지 과정들이 어떻게 상호작용하는지에 대한 간단한 설명
***** 프로그래밍 업무와 관련한 인지 과정
**** 요약
1. LTM에서 정보를 인출 (키워드의 의미)
2. 코드를 읽는 과정에서 발생하는 정보를 STM에 일시적으로 저장 (메서드, 변수 이름)
3. 작업기억공간에서 코드를 읽고 판단(처리) ("인덱스 값이 하나 작다", 모호한 단어를 보고 문맥 속에서 적합한 의미를 찾으려하기)
*** CHAPTER 2 신속한 코드 분석
**** 코드를 신속하게 읽기
코드를 읽을 때 우리는 그 코드에 존재하는 특정한 정보를 찾는다
- e.g. 새로운 기능을 추가할 부분, 버그가 있을만한 곳, 어떻게 구현된건지

관련 정보를 신속하게 찾는 능력을 향상하면
- 코드를 다시 찾아보는 횟수가 줄어든다
- 코드 여기저기를 살피는 횟수가 줄어든다
***** 두뇌에서 무슨 일이 일어나는가?
***** 재현한 코드 다시 살펴보기
***** 두 번째 실험 다시 살펴보기
***** 생소한 코드를 읽는 것은 왜 어려운가?
코드에 있는 정보를 모두 다 STM에 저장하고 처리하는 것은 물리적으로 불가능하다
- 용량에 제한이 있기 때문이다
**** 기억의 크기 제한을 극복하기
***** 단위로 묶는 것의 위력
***** 전문가는 초보자보다 코드를 더 잘 기억한다
**** 읽는 것보다 보는 것이 더 많다
정보가 두뇌로 들어오면 벌어지는 일
- 정보는 STM에 도달하기 전에 '감각 기억 공간'이라는 영역을 통과한다
- 시각, 청각, 촉각에 의한 정보가 여기에 잠시 저장된다
***** 영상 기억 공간
영상 기억 공간은 직전에 본 이미지가 만들어낸 시각적 자극을 잠시 저장할 수 있다
****** 영상 정보와 코드
무언가를 읽을 때 영상 기억 공간에 저장된다
영상 기억 공간에 저장된 모든 정보를 STM이 처리할 수 있는 것은 아니다
그러므로 코드를 읽을 때는 처리할 수 있는 정보를 선택해야 한다
***** 기억하는 대상이 중요한 것이 아니고 기억하는 방식이 중요하다
'무엇'을 기억해냈느냐뿐만 아니라 코드를 어떤 '순서'로 기억했는지 파악하는 것도 중요하다
****** 디자인 패턴의 사용
그룹으로 묶기 쉬운 코드를 작성하려면 디자인 패턴을 사용하면 된다
디자인 패턴에 대한 지식을 갖게 되면 청킹 능력이 향상되고 코드를 더 빠르게 수정할 수 있게된다
****** 주석문 쓰기
고수준 주석문은 코드를 청크 단위로 쪼개는데 도움이 된다
반면 저수준 주석문은 오히려 청킹 작업에 부담이 된다
****** 표식 남기기
***** 청킹 연습                                                    :note:
청킹을 의도적으로 연습하기 위해서는 적극적으로 코드를 기억해내는 것을 훈련하면 아주 좋다
**** 요약
- 코드를 기억해내는 일은 프로그래밍에 대한 지식이 어느 정도인지 가늠해볼 수 있는 자가 진단 도구가 된다
  - 이미 알고 있는 것을 기억하는 것은 쉽기 때문에 기억해낸 코드는 자기가 이미 잘 알고 있는 지식을 드러내준다
*** CHAPTER 3 프로그래밍 문법 빠르게 배우기
코드를 효율적으로 이해하는 정도는 이미 알고 있는 지식에 의해 영향을 받는다
- 프로그래밍 언어의 문법, 개념과 자료구조를 외우면 코드를 더 빨리 파악하는데 도움이 된다
**** 문법을 기억하기 위한 팁
개념, 자료구조, 문법을 더 많이 알수록 두뇌는 더 많은 코드를 쉽게 분리하고 기억하고 처리할 수 있다
***** 중간에 끊어지는 것이 미치는 나쁜 영향
두뇌가 작업을 하다 업무 중단을 받게 되면, 좋지 못한 결과를 초래한다
- 관련 정보를 검색하더라도 특정 주제에 대해 너무 자세히 논의하는 내용에 빠지게 되면 자칫 원래 목적을 잃어버릴 수도 있다

프로그래머들이 코드 작성을 하다 업무가 중단되면 그동안 코드에 대한 중요한 정보를 잊어버린다
**** 플래시카드 사용해 문법 배우기
신속하게 학습할 수 있는 좋은 방법 중 하나가 플래시 카드를 사용하는 것이다
앞면에는 암기하려는 내용에 대한 프롬프트 (지칭하는 단어나 질문)
뒷면에는 그에 대한 답
***** 언제 플래시카드를 사용해야 하는가
***** 플래시카드의 확장
새로운 개념을 접하면
- 프로그래밍 언어, 프레임워크, 라이브러리
그 내용을 가지고 플래시카드를 만들 수 있다

어떤 개념을 검색할 때
- 검색을 한다는 것은 그 내용에 대해 아직 모른다는 뜻

어떤 내용을 플래시 카드로 만들지는 스스로 판단해야 한다
별로 중요하지 않거나 거의 사용되지 않는 문법은 검색해도 전혀 문제가 되지 않는다
***** 플래시카드 개수 줄이기
플래시카드로 작성한 개념을 얼마나 잘 이해하고 있는지 확인하려면 각 카드에 정답 및 오답회수를 기록하기도 한다
**** 어떻게 하면 잊어버리지 않을 수 있을까?
무엇인가 읽고 듣고 보고 난 후 STM에 저장된 정보는 LTM으로 옮겨진다
LTM에 저장된 정보는
한 시간 이내에 반 정도 잊어버린다
이틀 후에는 25% 만 남는다

***** 기억을 잃어버리는 이유
부호화
- 기억이 뉴런에 의해 형성될 때 두뇌에서 일어나는 변화

****** 계층구조 대 네트워크
두뇌의 기억은 네트워크 구조로 되어 있다
- 하나의 사실은 다른 많은 사실과 연결되어 있다
***** 간격을 두고 반복하기
오랫동안 학습한 만큼 더 오래 기억한다
더 많은 시간을 학습해야 한다는 것이 아니라 *더 오랜 간격* 을 두고 학습해야 한다
**** 문법을 더 오랫동안 기억하기
기억을 강화하는 두 가지 테크닉
- 인출retrieval
  - 적극적으로 무언가를 일부러 기억해보려고 애쓰기
- 정교화elaboration
  - 기존 기억에 새로운 지식을 적극적으로 연결시키기
***** 정리
프로그래밍 언어의 문법을 외워야하는 이유
- 코드를 청킹할 때 유용해서 읽고 찾는 시간을 줄여주기 때문

외우는 방법
- 하루에 다 외우려고 하는게 아니라 긴 시간에 걸쳐 학습해야 한다

***** 정보를 기억하는 두 가지 형태
자기가 이미 알고 있다고 생각하는 내용을 기억하려고 노력하면 추가 학습 없이도 인출 강도가 강화된다
****** 저장 강도
저장강도란 LTM에 얼마나 잘 저장하고 있는가를 나타낸다

****** 인출 강도
인출강도란 무언가를 얼마나 쉽게 기억할 수 있는지

***** 단지 보기만 해서는 안 된다
***** 정보를 기억하는 것은 기억을 강화한다
인출을 쉽게 하기 위해서는 *많이* 노력해야 한다
문법을 *기억하는 연습* 을 해본 적이 없기 때문에 능동적으로 의도적으로 *기억해내려는 노력* 이 기억을 강화한다

기억하려고 애쓰기보다는 *찾아보는 것* 만 계속하여 인출강도가*발전하지 않는다*
검색하려고 할 때 검색 이전에 먼저 능동적으로 의도적으로 *기억하려고 시도* 해보기 바란다
당장 기억이 나지 않더라도 기억하려는 노력은 기억을 강화하고 다음번에 기억하는데 도움이 될 것이다
***** 능동적 사고를 통한 기억력 강화
정교화란 정보에 대해 생각하는 과정이다
정보에 대해 능동적으로 생각하고 그것을 반추해보는 것이다
****** 스키마타
스키마란 사고나 생각이 서로 관련되어 조직된 방식이다

새로운 정보를 학습할 때 정보는 LTM에 저장하기 전에 먼저 스키마의 형태로 만들어진다
이미 *존재하는 스키마에 잘 맞는* 정보일 수록 더 쉽게 기억할 수 있다
****** 정교화를 이용해 새로운 프로그래밍 개념 학습하기
- 새로운 개념이 어떤 다른 개념을 생각나게 했는가? 모든 관련된 개념을 적어보라
  - 새로운 개념은 왜 이미 알고 있는 그 개념을 생각나게 했을까?
  - 문법에 공통된 점이 있는가?
  - 비슷한 환경에서 사용될 수 있는가?
  - 그 개념을 대신해서 새로운 개념을 사용할 수 있는가?
  - 이 개념의 사용처는 어떻게 될까?
**** 요약
*** CHAPTER 4 복잡한 코드 읽는 방법
**** 복잡한 코드를 이해하는 것이 왜 어려울까?
***** 작업 기억 공간과 STM의 차이
***** 프로그래밍과 관련한 인지 부하의 종류
**** 인지 부하를 줄이기 위한 기법
***** 리팩터링
***** 생소한 언어 구성 요소를 다른 것으로 대치하기
***** 플래시카드에 코드 동의어 추가
**** 작업 기억 공간에 부하가 오면 사용할 수 있는 기억 보조 수단
***** 의존 그래프 생성
***** 상태표 사용
***** 의존 그래프와 상태표의 혼용
**** 요약
** PART II 코드에 대해 생각하기
*** CHAPTER 5 코드를 더 깊이 있게 이해하기
**** '변수 역할' 프레임워크
***** 변수는 각자 다른 일을 한다
***** 11가지 역할
**** 역할과 패러다임
***** 역할의 이점
***** 헝가리안 표기법
**** 프로그램에 대해 깊이 있는 지식을 얻으려면
***** 텍스트 지식 대 계획 지식
***** 프로그램 이해의 여러 단계
**** 텍스트를 읽는 것과 코드를 읽는 것은 유사하다
***** 코드를 읽을 때 우리 뇌에서는 무슨 일이 일어나는가?
***** 프랑스어를 배울 수 있다면 파이썬도 배울 수 있다
**** 코드 읽기에 적용해볼 수 있는 텍스트 이해 전략
***** 기존 지식의 활성화
***** 모니터링
***** 코드에서 중요한 라인을 결정하기
***** 변수명의 의미를 추론하기
***** 시각화
***** 질문하기
***** 코드 요약
**** 요약
*** CHAPTER 6 코딩 문제 해결을 더 잘하려면
**** 모델을 사용해서 코드에 대해 생각해보기
***** 모델의 유익함
**** 정신 모델
***** 정신 모델 자세히 살펴보기
***** 새로운 정신 모델 배우기
***** 코드에 대해 생각할 때 정신 모델을 효율적으로 사용하는 방법
**** 개념적 기계
***** 개념적 기계는 무엇인가?
***** 개념적 기계의 예
***** 개념적 기계의 층위
**** 개념적 기계와 언어
***** 개념적 기계의 확장
***** 여러 개념적 기계는 서로 충돌하는 정신 모델을 만들 수 있다
**** 개념적 기계와 스키마타
***** 왜 스키마타가 중요한가?
***** 개념적 기계는 의미론인가?
**** 요약
*** CHAPTER 7 생각의 버그
**** 왜 두 번째 프로그래밍 언어가 첫 번째보다 쉬울까?
***** 기존 프로그래밍 지식을 활용할 가능성을 높이는 방법
***** 전이의 다른 형태
***** 이미 알고 있다는 것은 저주인가 축복인가?
***** 전이의 어려움
**** 오해: 생각의 버그
***** 개념 변화를 통한 오개념 디버깅
***** 오개념 제압하기
***** 프로그래밍 언어에 대한 오개념
***** 새로운 프로그래밍 언어를 배울 때 오개념 방지하기
***** 새로운 코드베이스에서의 오개념 진단
**** 요약
** PART III 좋은 코드 작성하기
*** CHAPTER 8 명명을 잘하는 방법
**** 이름이 중요한 이유
***** 명명이 중요한 이유
***** 명명에 대한 다양한 관점
***** 초기 명명 관행은 지속적인 영향을 미친다
**** 명명의 인지적 측면
***** 형식이 있는 이름은 STM을 돕는다
***** 명확한 이름이 LTM에 도움이 된다
***** 변수 이름은 이해에 도움이 되는 다양한 유형의 정보를 포함할 수 있다
***** 이름의 품질 평가 시기
**** 어떤 종류의 이름이 더 이해하기 쉬운가?
***** 축약할 것인가, 하지 않을 것인가?
***** 스네이크 케이스냐, 캐멀 케이스냐?
**** 이름이 버그에 미치는 영향
***** 나쁜 이름을 가진 코드에 버그가 더 많다
**** 더 나은 이름을 선택하는 방법
***** 이름 틀
***** 더 나은 변수명에 대한 페이텔슨의 3단계 모델
**** 요약
*** CHAPTER 9 나쁜 코드와 인지 부하를 방지하는 두 가지 프레임워크
**** 코드 스멜이 인지 부하를 초래하는 이유
***** 코드 스멜에 대한 간략한 소개
***** 코드 스멜이 인지 과정에 악영향을 미치는 방식
**** 나쁜 이름이 인지 부하에 미치는 영향
***** 언어적 안티패턴
***** 인지 부하 측정
***** 언어적 안티패턴 및 인지 부하
***** 언어적 안티패턴이 혼란을 일으키는 이유
**** 요약
*** CHAPTER 10 복잡한 문제 해결을 더 잘하려면
**** 문제 해결이란 무엇인가?
***** 문제 해결 요소
***** 상태 공간
**** 프로그래밍 문제를 해결할 때 LTM의 역할은 무엇인가?
***** 문제 해결은 그 자체로 인지 과정인가?
***** 문제 해결을 위한 LTM 교육 방법
***** 문제 해결에 역할을 하는 두 가지 유형의 기억
**** 자동화: 암시적 기억 생성
***** 시간 경과에 따른 암시적 기억
***** 자동화를 통해 보다 신속하게 프로그램을 실행할 수 있는 이유
***** 암시적 기억 개선
**** 코드와 해설에서 배우기
***** 새로운 유형의 인지 부하: 본유적 부하
***** 개발 작업 시 풀이된 예제 활용하기
**** 요약
** PART IV 코딩에서의 협업
*** CHAPTER 11 코드를 작성하는 행위
**** 프로그래밍 중 이루어지는 다양한 활동
***** 검색
***** 이해
***** 전사
***** 증가
***** 탐구
***** 디버깅은 어떤가?
**** 프로그래머의 업무 중단
***** 프로그래밍 작업 시 워밍업 필요
***** 중단 후에는 어떻게 되는가?
***** 중단에 잘 대비하는 방법
***** 프로그래머를 방해할 때
***** 멀티태스킹에 대한 고찰
**** 요약
*** CHAPTER 12 대규모 시스템의 설계와 개선
**** 코드베이스의 특성 조사
***** 인지적 차원
***** 코드베이스 개선을 위해 CDCB 사용
***** 설계 기동 및 트레이드오프
**** 차원 및 활동
***** 차원이 활동에 미치는 영향
***** 예상 활동에 대한 코드베이스 최적화
**** 요약
*** CHAPTER 13 새로운 개발자 팀원의 적응 지원
**** 적응 지원의 문제
**** 전문가와 초보자의 차이
***** 초보자의 행동에 대한 심층적 이해
***** 개념을 구체적으로 보는 것과 추상적으로 보는 것의 차이
**** 적응 지원 개선
***** 작업은 하나의 프로그래밍 활동으로만 제한
***** 새 팀원의 기억 지원
***** 코드 함께 읽기
**** 요약
