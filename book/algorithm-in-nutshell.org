* Algorithm in nutshell
** 서문
*** 원칙: 의사코드가 아닌 실제 코드를 사용한다
*** 원칙: 해결하려는 문제와 알고리즘을 구분한다
구체적인 문제와 일반적인 알고리즘(인터페이스)를 구분하여 구체적인 문제 구현을 설계하는 접근법
*** 원칙: 필요한 만큼의 수학만 소개한다
이 책은 알고리즘을 실제로 어떻게 구현하느냐에 초점을 둔다
*** 원칙: 수학적 분석을 뒷받침하는 실험자료를 제시한다
각 알고리즘의 성능을 수학적으로 분석해서, 최고의 성능을 발위하는 조건을 이해할 수 있게 했다
** 1 알고리즘은 중요하다
*** 문제를 이해한다
문제를 해결하는 좋은 방법은 큰 그림부터 시작하는 것이다
- 문제를 이해하고
- 잠재적인 원인을 파악하고
- 세부사항으로 파고들어 간다
*** 필요하다면 실험해본다
*** 구원의 알고리즘
*** 또 다른 이야기
*** 이 이야기의 교훈
올바른 알고리즘을 찾는 건, 문제에 대한 적절한 해결책을 찾는 것과 같다
완벽한 해결책을 찾는게 아니라 단지 *충분히* 잘 작동하는 알고리즘이면 된다
해결책에 드는 비용과 해결책이 더해주는 가치의 균형을 잘 잡아야한다

(X) 알고리즘의 세부적인 수학적 분석을 수행할 능력을 필요 없지만,
(O) 다른사람의 분석을 이해할 정도는 되어야 한다


(X) 새로운 알고리즘을 고안하지 않아도 되지만
(O) 당면한 문제에 어느 알고리즘이 적합한지는 알아야 한다

*** 참고자료

** 2 알고리즘의 수학
알고리즘의 계산시간을 예측하는 일은 수학에 의존한다

책의 공통된 논지는 모든 가정과 근사는 상수만큼 다를 수 있고
추상화 과정에서 이 상수를 무시한다
*** 문제 인스턴스의 크기
문제 인스턴스는 프로그램에 입력할 특정 자료의 집합이다

수행할 연산의 종류를 고려해서 문제 인스턴스를 표현해야 한다
효율적인 알고리즘을 설계하는 일은 해결할 문제를 적절한 자료구조로 표현하는 일부터 시작한다

연구자들은 상수 배 차이가 나는 성능 비용은 점근적으로 같다고 가정한다
알고리즘을 제품에 들어갈 코드로 구현할 때는 이 상수 배 차이에 반드시 주의를 기울여야 한다
*** 함수의 증가율
실행 시간의 증가율을 문제 인스턴스의 크기에 관한 함수로 표현하기
추상화 과정에서 아래와 같은 세부사항이 빠진다
모든 프로그램은 **플랫폼** 에서 실행된다
- 컴퓨터 (CPU, 자료캐시, 부동소수점 유닛 등)
- 프로그램 언어 (컴파일러/해석기, 코드 최적화 설정 등)
- 운영체제
- 백그라운드에서 실행되고 있는 다른 프로세스들

알고리즘을 고른다는 건 알고리즘의 동작뿐만 아니라,
풀려고 하는 문제를 이해하고, 다룰 가능성이 있는 인스턴스의 확률분포까지고 고려해야 하는 일이다
*** 최고, 평균, 최저 상황에 대한 분석
*** 성능 계열
*** 연산의 혼합
*** 성능측정 연산
*** 마지막 한 가지
*** 참고자료

** 3 패턴과 도메인
*** 패턴: 의사전달을 위한 언어
디자인 패턴은 일반적으로 발생하는 문제에 대한 검증된 해결방안
*** 알고리즘 패턴의 형식
- 이름
  - 알고리즘을 기술하는 이름
- 개요
  - 알고리즘에 대한 추상적인 설명과 알고리즘의 목적에 대한 기술
- 사용환경
  - 알고리즘의 장점이 가장 잘 발현되는 상황을 기술
- 강점
  - 성공적으로 구현하려면 반드시 다뤄야하는 문제와 해결책에서 꼭 지켜야하는 특성
- 해결책
  - 코드로 알고리즘을 기술
- 결과
  - 알고리즘의 장단점과 안티-패턴
- 분석
  - 알고리즘 분석에 관한 개요
*** 의사코드 패턴 형식
*** 설계 형식
*** 실험 평가 형식
*** 도메인과 알고리즘
표준적인 알고리즘 도메인 분류법이 존재하지 않기 때문에
각 알고리즘이 특정 도메인 집합에 속한다고 말할 수 없다
알고리즘을 적용할 상황을 보면 그 알고리즘에 적합한 특정 도메인을 알 수 있다
*** 부동소수점 계산
*** 수동 메모리 할당
*** 프로그램 언어의 선택
*** 참고자료

** 4 정렬 알고리즘
*** 개요
*** 삽입 정렬
*** 중앙값 정렬
*** 빠른정렬
*** 선택 정렬
*** 힙 정렬
*** 계수 정렬
*** 버킷 정렬
*** 정렬 알고리즘의 선택 기준
*** 참고자료

** 5 검색
*** 개요
*** 깊이-우선 검색
*** 너비-우선 검색
*** 단일 출발지 최단 거리
*** 모든 쌍 최단 경로
*** 최소 신장 트리 알고리즘
*** 참고자료

** 6 그래프 알고리즘
*** 개요
*** 깊이-우선 검색
*** 너비-우선 검색
*** 단일 출발지 최단 거리
*** 모든 쌍 최단 경로
*** 최소 신장 트리 알고리즘
*** 참고자료

** 7 인공지능으로 경로 찾기
*** 개요
*** 게임 트리
*** 검색 트리
*** 깊이-우선 검색
*** 너비-우선 검색
*** A* 검색
*** 미니맥스
*** 네그맥스
*** 알파베타
*** 참고자료

** 8 네트워크 흐름 알고리즘
*** 개요
*** 최대 흐름
*** 이분 맞춤
*** 여유 경로에 대한 고찰
*** 최소 비용 흐름
*** 옮겨싣기
*** 수송
*** 할당
*** 선형 계획법
*** 참고자료

** 9 계산 기하학
*** 개요
*** 볼록 껍질 스캔
*** 라인스위프
*** 최근접 이웃 질의
*** 범위 질의
*** 참고자료

** 10 모든 방법이 실패할 때
*** 가정의 변화
*** 근사 알고리즘
*** 오프라인 알고리즘
*** 병렬 알고리즘
*** 무작위 알고리즘
*** 아주 가끔 틀릴 수도 있는 알고리즘
*** 참고자료

** 11 후기
*** 개요
*** 원칙: 자료를 이해한다
*** 원칙: 작은 문제로 나눈다
*** 원칙: 적합한 자료구조를 선택한다
*** 원칙: 성능을 높이려면 저장공간을 추가한다
*** 원칙: 확실한 해결책이 없다면, 검색을 구성해본다
*** 원칙: 확실한 해결책이 없다면, 해결책이 있는 다른 문제로 환원한다
*** 원칙: 알고리즘을 작성하는 건 어렵다-알고리즘을 시험하는 건 더 어렵다

** 부록 성능측정
*** 통계의 기초
*** 하드웨어
*** 예에 관하여
