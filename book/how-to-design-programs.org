#+title: How To Design Programs

* HOW TO DESIGN PROGRAMS
*** 옮긴이의 글
구조적으로 프로그래밍을 할 수 있도록 자주 쓰이는 디자인 방법들을 모아 '디자인 레시피'라는 이름으로 제시
프로그래밍 하기 위해서 이러한 디자인 레시피 중에서 필요한 것들을 선택해 템플릿을 만들고, 이러한 템플릿에 내용을 채워 넣기만 하면 됩니다
*** 왜 모든 사람이 프로그래밍을 배워야 하는가
디자인 레시피의 기본 구성 요소
- 문제에 주어진 데이터의 종류에 대한 설명
- 프로그램의 동작에 대한 비공식적 명세
- 예를 통한 동작의 예시
- 프로그램 템플릿 혹은 레이아웃의 개발
- 템플릿을 완전한 정의로 변환
- 테스팅을 통한 오류 발견

프로그래밍의 핵심
- 한 가지 값을 다른 값과 연관 짓기
- 이름을 값으로 치환하면서 연관 관계를 계산하기
*** 디자인 레시피
데이터 기반 프로그램
- 입력 데이터와 프로그램 간의 관계
- 입력 데이터의 설명에서 프로그래 템플릿을 유도

재귀
- 반복적으로 실행될 때 새로운 문제 인스턴스를 발생시킴

축적
- 입력을 처리하면서 자료를 수집해 나감

과거민감
- 여러 번 연속 실행될 때 이전에 실행한 정보를 기억

---

디자인 하는 방법
1. 주관식으로 기술되어 있는 문제를 분석
2. 문제의 핵심을 추상적으로, 예를 들어 표현
3. 간결한 언어로 문장을 작성하고 표현
4. 체크 사항과 테스트를 기반으로 이러한 활동을 평가하고 개선
5. 세부 사항에 초점
*** Scheme 과 DrRacket 의 선택
*** 이 책의 구성
*** 감사의 글
** 1부 간단한 형태의 데이터 처리
*** 학습자, 교육자, 컴퓨터
우리는 어릴때부터 *연산(혹은 컴퓨팅 )* 을 배운다
- e.g. 사칙연산, 제곱, sin ...
- 이것은 우리를 컴퓨터로 만들어서, 단순한 프로그램을 실행할 수 있도록 우리를 *프로그램* 하는것과 같다

컴퓨터는 모든 종류의 정보를 처리할 수 있다
사람들은 *정보* 와 *명령* 을 말로 표현한다
말로 표현된 복잡한 명령은 컴퓨터가 이해 못하므로 컴퓨터 언어로 표현하는 법을 배워서 정보와 명령을 주고 받을 수 있어야한다

명령과 정보를 컴퓨터 언어로 나타낸 것이 바로 *프로그래밍 언어* 이다
프로그래밍 언어로 표현된 정보는 *데이터* 라고 부른다
데이터는 정보를 나타내지만 이에 대한 구체적인 *해석* 은 우리에게 달려있다
데이터는 원자데이터(ATOMIC DATA)와 복합 데이터(COMPOUND DATA)로 나뉜다

명령/연산에도 여러 유형이 존재한다
e.g. 기본 연산(PRIMITIVE OPERATION)
*** 수, 표현, 간단한 프로그램
**** 수와 연산
**** 변수와 프로그램
변수 표현(VARIABLE EXPRESSION)을 이용해 어떤 값들 사이의 의존성을 나타내는 방법을 배운다

변수는 미지의 값을 대신하는 작업장과 같다
변수가 포함된 식은 해당 변수에 어떤 값이 주어졌을 때 *이를 연산하는 방법* 을 기술한 일종의 규칙이다

프로그램이 이와 같다
프로그램은 어떤 데이터에서 새로운 데이터를 만들어 내는 방법을 설명하는 *규칙* 이다
큰 프로그램은 많은 작은 프로그램으로 구성되어 있으며, 이것들을 적절한 방법을 이용해 결합시킨다
그러므로 규칙에 각각 적절한 이름을 붙여야 한다
**** 응용 문제
프로그래머에게 수학 식을 프로그래밍 하는 과제가 주어진 경우는 거의 없다

공식화 되지 않은 문제에 대한 설명이 주어진다
설명에 포함된 정보는 관계가 없거나 모호할 수 있다

프로그래머의 첫 번째 과제는 연관된 정보를 추출해서 적절한 표현으로 *공식화* 하는 것이다

어떤 값에 대해 다른 값으로 계산하는 프로그램
**** 오류
**** 프로그램 디자인
문제 정의에서 어떤 것이 의미 있는 정보이고 어떤 것이 그렇지 않은지 결정해야 한다
프로그램 무엇을 입력 받으며 무엇을 출력하는지 그리고 어떻게 입력과 출력을 연관짓는지 이해해야 한다
작업할 데이터에 대해 프로그래밍 언어가 특정한 기본 연산을 제공하는지 알아야 한다
프로그램을 완성하고 나면 이 프로그램이 실제로 의도한 연산을 수행하는지 검사해야 한다
***** 프로그램의 목적 이해
프로그램을 디자인 하는 목적은 입력을 받아 결과를 출력하는 절차를 만드는 것이다

프로그램에 의미 있는 이름을 붙이고 어떠한 정보를 입력받아 출력하는지 기술하는 것에서 시작한다
이것을 *계약(CONTRACT)* 라고 한다

계약을 작성하고 나면 다음으로는 *헤더(HEADER)* 를 추가할 수 있다
헤더는 프로그램의 이름을 다시 서술하며, 각 입력에 대해 독립적인 이름을 부여한다
이런 이름은 (대수적) 변수이며 프로그램의 매개변수(PARAMETER) 로 참조된다

끝으로 계약과 매개변수를 이용해서 프로그램이 어떠한 작업을 하는지 설명하는 간단한 *목적* 문장을 만든다

#+begin_src scheme
;; 계약 : area-of-ring : number number -> number

;; 목적 : 반지름이 outer 이고 내부 구멍의 반즈림이 inner 인 링의 넓이를 구한다

;; 예 : (area-of-ring 5 3)의 값은 50.24

;; 정의 : [header를 수정]
(define (area-of-ring outer inner)
  (- (area-of-disk outer)
     (area-of-disk inner)))

;; 테스트 :
(area-of-ring 5 3)
;; 예상값
50.24
#+end_src

주어진 조건이 고정된 숫자일 경우, 그 값은 프로그램에 직접 들어갈 수 있다
조건이 알려지지 않은 값이며 추후에 다른 사람에 의해 결정된다면, 이는 입력이 되어야 한다
***** 프로그램 예
입력 예들을 만들어 결과가 무엇이 되어야 하는지 판단한다
***** 구현부
우리는 주어진 입력에서 어떻게 결과를 계산해야 하느지 이해하고 있는 경우에만 프로그램을 작성할 수 있다

프로그램의 구현은
- 주어진 자료를 읽고 이해하는 능력
- 수학적 관계를 추출해 내는 능력
- 기초적 사실에 대한 지식
에 의존한다
***** 테스트
***** 영역 지식
영역(도메인)이라고 부르는 프로그램이 속한 분야에 대한 정보가 필요하다
이런 형태의 정보를 영역 지식(DOMAIN KNOWLEDGE)라고 한다
*** 프로그램은 함수+변수 정의다
보조 함수를 사용하면 디자인 프로세스를 관리할 수 있으며 프로그램을 더 쉽게 이해할 수 있다
- 원래의 문제를 더 쉽게 풀 수 있는 작은 문제로 *쪼갤* 수 있다
**** 함수 조합
여러 가지 값이 서로 연관되어 있는 상황
- 이익은 수입에서 비용을 뺀 값이다
- 수입은 티켓 판매로만 얻어진다
  - 티켓 가격과 관객 수의 곱이다
- 비용은 고정된 부분과 관객 수에 따라 변하는 부분이 존재한다
- 문제는 관객 수가 티켓 가격과 어떻게 연관되는지 기술한다

각 연관성에 대해 함수를 하나씩 만들자
함수는 값이 어떻게 서로 *관련되어* 있는지 계산하는 것에 해당한다

#+begin_src scheme
;; profit : number -> number
;; 주어진 티켓 가격에 대해 수입과 비용의 차를 통해 이익을 계산함
(define (profit ticket-price) ...)

;; revenue : number -> number
;; 주어진 티켓 가격에 대해 이익을 계산
(define (revenue ticket-price) ...)

;; cost : number -> number
;; 주어진 티켓 가격에 대해 비용을 계산
(define (cost ticket-price) ...)

;; attendees : number -> number
;; 주어진 티켓 가격에 대해 관객 수를 계산
;; EXAMPLES:
;; 5.1 105
;; 5.0 120
;; 4.9 135
(define (attendees ticket-price) ...)
#+end_src
***** 보조 함수에 대한 가이드라인
주어진 문제 혹은 예를 계산하는 과정에서 발견한 *값들 간의 각 연관성* 에 대해 보조 함수 정의를 만들어라
**** 변수 정의
같은 숫자가 프로그램에서 여러 번 나타날 경우, 이름과 값을 연관시켜 주는 역할을 하는 변수 정의를 사용해서 그 숫자에 이름을 부여해야 한다
**** 함수 구성에 관한 연습문제
*** 조건문과 함수
**** 불린과 관계
프로그램도 조건에 따라 연산해야 한다
**** 조건을 검사하는 함수
**** 조건과 조건문
**** 조건 함수 디자인하기
*** 기호 정보
**** 기호에 관한 몸풀기 문제
*** 복합 데이터 1: 구조체
**** 구조체
**** 추가 연습문제: 간단한 그림 그리기
**** 구조체 정의
**** 데이터 정의
**** 복합 데이터를 다루는 함수 디자인
**** 추가 연습문제: 원과 사각형 움직이기
**** 추가 연습문제: 행맨 단어 맞히기
*** 데이터의 다양성
**** 데이터를 혼합하고 구분하기
**** 혼합 데이터를 다루는 함수 디자인
**** 함수 조합 다시보기
**** 추가 연습문제: 도형 움직이기
**** 입력 오류
*** 쉬어가기 1: 구문과 의미
**** Scheme 의 어휘
**** Scheme 의 문법
**** Scheme 의 의미
**** 오류
**** 불린 표현
**** 변수 정의
**** 구조체 정의
** 2부 임의의 큰 데이터 처리
*** 복합 데이터 2: 리스트
**** 리스트
**** 임의 길이의 리스트에 대한 데이터 정의
**** 임의 길이의 리스트 다루기
**** 자기 참조 데이터 정의에 대한 함수 디자인
**** 간단한 리스트를 다루는 다양한 예
*** 리스트 처리 더 보기
**** 리스트를 출력하는 함수
**** 구조체를 포함하는 리스트
**** 추가 연습문제: 그림 옮기기
*** 자연수
**** 자연수의 정의
**** 임의 길이의 자연수 다루기
**** 추가 연습문제: 리스트 작성 및 함수 테스트
**** 자연수에 대한 또 다른 데이터 정의
**** 자연수의 성질에 관한 보다 자세한 논의
*** 함수 조합 다시 보기
**** 복잡한 프로그램 디자인하기
**** 재귀 보조 함수
**** 문제 일반화, 함수 일반화
**** 추가 연습문제: 단어 재배열하기
*** 쉬어가기 2: 리스트 축약
