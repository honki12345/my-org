#+title: How To Design Programs

* HOW TO DESIGN PROGRAMS
*** 옮긴이의 글
구조적으로 프로그래밍을 할 수 있도록 자주 쓰이는 디자인 방법들을 모아 '디자인 레시피'라는 이름으로 제시
프로그래밍 하기 위해서 이러한 디자인 레시피 중에서 필요한 것들을 선택해 템플릿을 만들고, 이러한 템플릿에 내용을 채워 넣기만 하면 됩니다
*** 왜 모든 사람이 프로그래밍을 배워야 하는가
디자인 레시피의 기본 구성 요소
- 문제에 주어진 데이터의 종류에 대한 설명
- 프로그램의 동작에 대한 비공식적 명세
- 예를 통한 동작의 예시
- 프로그램 템플릿 혹은 레이아웃의 개발
- 템플릿을 완전한 정의로 변환
- 테스팅을 통한 오류 발견

프로그래밍의 핵심
- 한 가지 값을 다른 값과 연관 짓기
- 이름을 값으로 치환하면서 연관 관계를 계산하기
*** 디자인 레시피
데이터 기반 프로그램
- 입력 데이터와 프로그램 간의 관계
- 입력 데이터의 설명에서 프로그래 템플릿을 유도

재귀
- 반복적으로 실행될 때 새로운 문제 인스턴스를 발생시킴

축적
- 입력을 처리하면서 자료를 수집해 나감

과거민감
- 여러 번 연속 실행될 때 이전에 실행한 정보를 기억

---

디자인 하는 방법
1. 주관식으로 기술되어 있는 문제를 분석
2. 문제의 핵심을 추상적으로, 예를 들어 표현
3. 간결한 언어로 문장을 작성하고 표현
4. 체크 사항과 테스트를 기반으로 이러한 활동을 평가하고 개선
5. 세부 사항에 초점
*** Scheme 과 DrRacket 의 선택
*** 이 책의 구성
*** 감사의 글
** 1부 간단한 형태의 데이터 처리
*** 학습자, 교육자, 컴퓨터
우리는 어릴때부터 *연산(혹은 컴퓨팅 )* 을 배운다
- e.g. 사칙연산, 제곱, sin ...
- 이것은 우리를 컴퓨터로 만들어서, 단순한 프로그램을 실행할 수 있도록 우리를 *프로그램* 하는것과 같다

말로 표현된 복잡한 명령은 컴퓨터가 이해 못하므로 컴퓨터 언어로 표현하는 법을 배워서 정보와 명령을 주고 받을 수 있어야한다
*** 수, 표현, 간단한 프로그램
**** 수와 연산
**** 변수와 프로그램
프로그램이 이와 같다
프로그램은 어떤 데이터에서 새로운 데이터를 만들어 내는 방법을 설명하는 *규칙* 이다
큰 프로그램은 많은 작은 프로그램으로 구성되어 있으며, 이것들을 적절한 방법을 이용해 결합시킨다
그러므로 규칙에 각각 적절한 *이름* 을 붙여야 한다
**** 응용 문제
프로그래머의 첫 번째 과제는 연관된 정보를 추출해서 적절한 표현으로 *공식화* 하는 것이다

어떤 값에 대해 다른 값으로 계산하는 프로그램
**** 오류
**** 프로그램 디자인
문제 정의에서 어떤 것이 *의미 있는 정보* 이고 어떤 것이 그렇지 않은지 결정해야 한다
프로그램 무엇을 입력 받으며 무엇을 출력하는지 그리고 *어떻게 입력과 출력을 연관짓는지* 이해해야 한다
작업할 데이터에 대해 프로그래밍 언어가 특정한 *기본 연산을 제공하는지* 알아야 한다
만약 기본 연산이 제공되지 않는다면, 이런 연산을 수행하는 내부 프로그램을 작성해야 한다
프로그램을 완성하고 나면 이 프로그램이 실제로 *의도한 연산을 수행하는지 검사* 해야 한다
이 과정을 통해 구문오류, 실행시간 오류 혹은 논리 오류를 찾아낼 수 있다

이런 복잡한 과정에 질서를 부여하기 위해서
우리가 *무엇을 해야하는지에 대한 순서* 를 단계별로 설명해주는 **디자인 레시피** 를 작성해서 따르는 것이 최선의 방법이다
***** 프로그램의 목적 이해
프로그램을 디자인 하는 목적은 입력을 받아 결과를 출력하는 절차를 만드는 것이다

#+begin_src scheme
;; 계약 : area-of-ring : number number -> number

;; 목적 : 반지름이 outer 이고 내부 구멍의 반즈림이 inner 인 링의 넓이를 구한다

;; 예 : (area-of-ring 5 3)의 값은 50.24

;; 정의 : [header를 수정]
(define (area-of-ring outer inner)
  (- (area-of-disk outer)
     (area-of-disk inner)))

;; 테스트 :
(area-of-ring 5 3)
;; 예상값
50.24
#+end_src

문제를 조사해서 *주어진 값* 과 *게산되어야하는 값* 을 분리해야 한다
주어진 조건이 *고정된 숫자* 일 경우, 그 값은 프로그램에 직접 들어갈 수 있다
조건이 알려지지 않은 값이며 추후에 다른 사람에 의해 결정된다면, 이는 입력이 되어야 한다
****** 계약
프로그램에 의미 있는 이름을 붙이고 어떠한 정보를 입력받아 출력하는지 기술하는 것에서 시작한다
이것을 *계약(CONTRACT)* 라고 한다

계약은 두 부분으로 구성된다
콜론 왼쪽의 부분은 프로그램 이름을 기술한다
콜론 오른쪽의 부분은 어떤 종류의 데이터를 입력받아 어떤 결과를 출력하는지 기술한다. 입력과 출력은 화살표로 구분한다
****** 헤더
헤더는 프로그램의 이름을 다시 서술하며, 각 입력에 대해 독립적인 이름을 부여한다
이런 이름은 (대수적) 변수이며 프로그램의 매개변수(PARAMETER) 로 참조된다
****** 목적
계약과 매개변수를 이용해서 프로그램이 어떠한 작업을 하는지 설명하는 간단한 *목적* 문장을 만든다
***** 프로그램 예
프로그램이 무엇을 계산해야 하는지 더 잘 이해하기 위해,
입력 예들을 만들어 결과가 무엇이 되어야 하는지 판단한다
***** 구현부
언어의 기본연산과 '정의한' 프로그램을 이용해 매개변수들에서 결과를 계산해낸다

우리는 주어진 입력에서 어떻게 결과를 계산해야 하느지 이해하고 있는 경우에만 프로그램을 작성할 수 있다

프로그램의 구현은
- 주어진 자료를 읽고 이해하는 능력
- 수학적 관계를 추출해 내는 능력
- 기초적 사실에 대한 지식
에 의존한다
***** 테스트
***** 영역 지식
영역(도메인)이라고 부르는 프로그램이 속한 분야에 대한 정보가 필요하다
이런 형태의 정보를 영역 지식(DOMAIN KNOWLEDGE)라고 한다
*** 프로그램은 함수+변수 정의다
원래의 문제를 더 쉽게 풀 수 있는 작은 문제로 *쪼갤* 수 있다
**** 함수 조합
여러 가지 값이 서로 연관되어 있는 상황에서는
여러 가지 연관성에 하나씩 접근하는 것이 바람직하다
- 이익은 수입에서 비용을 뺀 값이다
- 수입은 티켓 판매로만 얻어진다
  - 티켓 가격과 관객 수의 곱이다
- 비용은 고정된 부분과 관객 수에 따라 변하는 부분이 존재한다
- 문제는 관객 수가 티켓 가격과 어떻게 연관되는지 기술한다

각 연관성에 대해 함수를 하나씩 만들자
함수는 값이 어떻게 서로 *관련되어* 있는지 계산하는 것에 해당한다

#+begin_src scheme
;; profit : number -> number
;; 주어진 티켓 가격에 대해 수입과 비용의 차를 통해 이익을 계산함
(define (profit ticket-price) ...)

;; revenue : number -> number
;; 주어진 티켓 가격에 대해 이익을 계산
(define (revenue ticket-price) ...)

;; cost : number -> number
;; 주어진 티켓 가격에 대해 비용을 계산
(define (cost ticket-price) ...)

;; attendees : number -> number
;; 주어진 티켓 가격에 대해 관객 수를 계산
;; EXAMPLES:
;; 5.1 105
;; 5.0 120
;; 4.9 135
(define (attendees ticket-price) ...)
#+end_src
***** 보조 함수에 대한 가이드라인
주어진 문제 혹은 예를 계산하는 과정에서 발견한 *값들 간의 각 연관성* 에 대해 보조 함수 정의를 만들어라
**** 변수 정의
같은 숫자가 프로그램에서 여러 번 나타날 경우, 이름과 값을 연관시켜 주는 역할을 하는 변수 정의를 사용해서 그 숫자에 이름을 부여해야 한다
***** 변수 정의에 대한 가이드라인
자주 사용되는 상수값에 이름을 부여하고 프로그램에서 상수를 사용하는 대신에 그 이름을 사용해라
**** 함수 구성에 관한 연습문제
***** 3.3.3
#+begin_src scheme
;; area-cylinder : number number -> number
;; to determine the area of a cylinder
(define (area-cylinder radius height)
  (+ (* (circumference-circle radius) height)
     (area-circle radius)
     (area-circle radius)))

;; area-circle : number -> number
;; to determine the area of a circle
(define (area-circle radius)
  (* pi radius radius))

#+end_src
*** 조건문과 함수
**** 불린과 관계
프로그램도 조건에 따라 연산해야 한다
**** 조건을 검사하는 함수
**** 조건과 조건문
**** 조건 함수 디자인하기
조건 함수를 작성하기의 핵심은
주어진 문제가 경우의 수를 나열하는 것을 인식하고 각각의 경우를 찾아내는 것

| 단계       | 목표                             | 활동                                                                                               |
|------------+----------------------------------+----------------------------------------------------------------------------------------------------|
| 데이터분석 | 함수가 다루는 각각의 조건을 결정 | 개별 조건을 찾기 위해 주어진 문제를 조사: *모든 가능한 조건을 나열*                                |
| 예         | 조건마다 예를 제시               | 조건마다 적어도 하나 이상의 예를 선택: 각 조건의 구간에 대해 예들은 반드시 *경계값* 을 포함해야 함 |
| 조건       | 조건 표현을 작성                 | 조건마다 조건절을 두어 조건 표현 틀 작성                                                           |
| 결과값     | 조건절에 대해 결과값 작성        | 각 조건을 분리해서 다룸                                                                                                 |

***** 데이터 분석과 정의
어떤 문제가 조건을 다루는 것임을 알고 나면, 이 조건들을 모두 찾아야 한다

수를 다루는 함수의 경우에 좋은 전략은
수직선을 그려서 각 조건에 해당하는 것을 찾는 것이다
***** 함수 예
각 조건에 대해 예를 최소한 하나씩 작성해야 한다
수 조건과 같은 조건을 다룬다면 경계값에 대한 경우 또한 예에 포함해야 한다
***** 함수 구현부 - 조건
함수 구현부는 반드시 독립적인 조건 개수만큼의 조건절을 갖는 조건표현으로 구성되어야 한다
***** 함수 구현부 - 결과값
각 조건절에 대해 함수가 어떤 값을 출력해야 하는지 결정해야 한다
***** 단순화
조건을 더 단순화할 수 있는지 검사할 수 있다
*** 기호 정보
기호는 하나의 작음 따옴표 다음에 이어지는 키보드 문자들의 순열을 말한다

기호는 원자적 데이터다
**** 문자열에 관한 노트
문자열은 기호 데이터다
문자열 또한 키보드 문자들의 집합이지만 이것들은 큰 따옴표로 묶여있다

문자열은 복합 데이터다
**** 기호에 관한 몸풀기 문제
*** 복합 데이터 1: 구조체
입력은 보통 많은 속성을 갖는 어떤 물체에 관한 자료다
우리는 이럴 때 여러 정보를 *묶어서(COMPOUND)* 하나의 자료로 표현한다

구조체는 *고정된* 개수의 값을 하나의 자료로 조합한다
**** 구조체
**** 추가 연습문제: 간단한 그림 그리기
**** 구조체 정의
구조체를 사용하면 고정된 개수의 속성을 갖는 객체를 표현할 수 있다
**** 데이터 정의
**** 복합 데이터를 다루는 함수 디자인
프로그래머가 구조체가 필요하다는 것을 인식해야 한다
어떤 한 항목이 여러 정보를 가질 경우 구조체를 사용한다
***** 데이터 분석과 디자인
함수를 작성하기 전에,
주어진 *문제 정보* 를 어떻게 표현할지 이해해야 한다
문제에서 (연관된) 항목의 정보를 찾아서 이를 토대로 *데이터 표현* 을 디자인한다
***** 템플릿
복합 데이터의 각 필드를 기억하기 위해, 템플릿을 작성한다
**** (그림12) 복합 데이터에 대한 정리된 디자인 레시피             :recipe:
***** 데이터 분석과 디자인
데이터 정의를 작성한다

문제에서 주어진 *항목의 속성 개수* 를 파악; 각 항목에 대해 구조체 정의 및 데이터 정의를 작성
***** 계약, 목적, 헤더
함수에 이름을 부여; 입력과 출력값의 형태를 명시; 프로그램의 목적을 기술; 헤더를 생성

함수의 이름, 입력 데이터의 종류, 출력 데이터의 종류를 명시하고, 함수의 목적을 기술함
#+begin_src racket
  ; name: in1 in2 ... -> out
  ; x1 ... 에서 ... 계산
  (define (name x1 x2 ...) ...)
#+end_src
***** 예
예제를 통해 입출력 간의 관계를 구체화

문제에서 예를 찾음; 예를 가지고 작업; 가능하면 결과가 올바른지 검증; 예를 만듦
***** 템플릿
개요를 작성

복합 데이터 매개변수에 대해 선택자를 이용해서 실제 구현의 형태를 표현; 함수가 조건을 다루는 경우, 모든 가능한 경우의 수를 표현
***** 구현
함수를 정의

Scheme의 기본 연산, 다른 함수, 선택자 표현, 변수를 이용해 Scheme 표현을 생성
***** 테스트
문제를 발견 (오타 및 논리 오류)

함수를 예시 입력에 적용; 결과값이 예측한 대로 나왔는지 검사
**** 추가 연습문제: 원과 사각형 움직이기
**** 추가 연습문제: 행맨 단어 맞히기
*** 데이터의 다양성
어떤 함수가 숫자(또는 불린, 기호)와 구조체를 동시에 처리하거나
다양한 종류의 구조체를 동시에 처리해야한다
**** 데이터를 혼합하고 구분하기
위의 함수를 다루기 위해 데이터의 종류를 인식할 수 있는 연산인 술어(PREDICATES)를 제공한다

number?: 값이 숫자인가
boolean?: 값이 불린인가?
symbol?: 값이 기호인가?
struct?: 값이 구조체인가?
- 구조체의 경우에는 각 구조체의 종류를 구별할 수 있도록 별도의 술어를 제공한다
**** 혼합 데이터를 다루는 함수 디자인
**** 함수 조합 다시보기
**** 추가 연습문제: 도형 움직이기
**** 입력 오류
*** 쉬어가기 1: 구문과 의미
**** Scheme 의 어휘
**** Scheme 의 문법
**** Scheme 의 의미
**** 오류
**** 불린 표현
**** 변수 정의
**** 구조체 정의
** 2부 임의의 큰 자료 처리
*** 복합 데이터 2: 리스트
리스트는 임의의 길이(유한하지만 정해지지 않은 개수)의 데이터를 포함할 때 사용한다
**** 리스트
리스트를 만들 때에는 항상 빈 리스트에서 시작한다
**** 임의 길이의 리스트에 대한 데이터 정의
**** 임의 길이의 리스트 다루기
**** 자기 참조 데이터 정의에 대한 함수 디자인
**** 간단한 리스트를 다루는 다양한 예
*** 리스트 처리 더 보기
**** 리스트를 출력하는 함수
**** 구조체를 포함하는 리스트
**** 추가 연습문제: 그림 옮기기
*** 자연수
**** 자연수의 정의
**** 임의 길이의 자연수 다루기
**** 추가 연습문제: 리스트 작성 및 함수 테스트
**** 자연수에 대한 또 다른 데이터 정의
**** 자연수의 성질에 관한 보다 자세한 논의
*** 함수 조합 다시 보기
**** 복잡한 프로그램 디자인하기
**** 재귀 보조 함수
**** 문제 일반화, 함수 일반화
**** 추가 연습문제: 단어 재배열하기
*** 쉬어가기 2: 리스트 축약
** 3부 임의의 큰 데이터 처리 더 보기
*** 자기 참조 데이터 정의 더 보기
**** 구조체의 구조
**** 추가 연습문제: 이진 검색 트리
**** 리스트 내의 리스트
**** 추가 연습문제: Scheme 계산
*** 상호 참조 데이터 정의
**** 구조체 리스트, 구조체 내의 리스트
**** 상호 참조 정의를 다루는 함수 디자인하기
**** 추가 연습문제: 웹페이지 더 보기
*** 반복적 개선을 통한 개발
복잡한 문제에서 이를 달성하는 최선의 방법은 핵심적인 원소들로 시작해서
반복적으로 이를 개선하여,
현재 모델이 충분할 때까지 더 많은 속성을 추가하는 것이다
**** 데이터 분석
**** 데이터 집합 정의하기 및 개선하기
**** 함수 및 프로그램 개선하기
*** 두 복합 데이터 다루기
**** 두 리스트 동시에 다루기: 경우 1
**** 두 리스트 동시에 다루기: 경우 2
**** 두 리스트 동시에 다루기: 경우 3
**** 함수 단순화
**** 복잡한 두 개의 데이터를 입력받는 함수 디자인
**** 복잡한 두 입력을 다루는 예
**** 추가 연습문제: Scheme 계산하기, 두 번째
**** 통일성과 테스트
*** 쉬어가기: 지역정의와 유효 영역
**** local을 이용한 함수 조직
**** 유효 영역과 블록 구조
** 4부 디자인 추상화
*** 정의 사이의 유사성
**** 함수 사이의 유사성
**** 데이터 정의 사이의 유사성
*** 함수는 값이다
**** 구문과 의미
**** 추상 함수 및 다형적 함수에 대한 계약
*** 예에서 추상화 디자인하기
**** 예에서 추상화 끌어내기
**** 추상화 리스트 함수를 다루는 몸풀기 문제
**** 추상화와 유일한 관리 지점
**** 추가 연습문제: 움직이는 그림 다시 보기
**** 참고: 템플릿으로부터 추상화 디자인하기
*** 함수를 출력하는 함수를 이용한 추상화 디자인
**** 함수를 출력하는 함수
**** 값으로서의 함수를 이용한 추상 함수 디자인
**** GUI 맛보기
*** 수학 예제
**** 수열과 급수
**** 등차수열과 급수
**** 등비수열과 급수
**** 함수 내 면적
**** 함수의 기울기
*** 쉬어가기: 즉석에서 함수 정의하기
**** 람다 표현의 구문
**** 람다의 영역과 의미
**** 람다의 활용
** 5부 발생적 재귀
*** 새로운 형태의 재귀 호출
**** 구조적 재귀함수
함수는 매개변수를 분석해서 매개변수를 중간 단계의 구조적 요소로 변갱해 처리한다
만일 중간 단계의 요소 중 하나가 원래 입력과 동일하다면, 이 함수는 재귀적이다
이를 (구조적) 재귀함수라 한다
**** 테이블 위의 공 모델링하기
**** 빠르게 정렬하기
*** 알고리즘 디자인하기
**** 종료
**** 구조적 재귀 대 발생적 재귀
**** 선택하기
*** 주제에 의한 변주곡
**** 프랙탈
**** 파일에서 선으로, 리스트에서 리스트를 갖는 리스트로
**** 이진 검색
**** 뉴턴 방법
**** 추가 연습문제: 가우스 소거법
*** 역추적하는 알고리즘
**** 그래프 순회
**** 추가 연습문제: 퀸 체크
*** 쉬어가기: 컴퓨팅 연산 비용과 벡터
**** 구체적 시간, 추상 시간
**** '차수'의 정의
**** 벡터 맛보기
** 6부 지식 축적
*** 지식의 손실
**** 구조적 처리의 문제점
**** 발생적 재귀의 문제점
*** 축적기 방식의 함수 디자인하기
**** 축적기의 필요성 인식하기
**** 축적 방식의 함수
**** 함수를 축적 방식으로 바꾸기
*** 축적의 다른 용도
**** 추가 연습문제: 트리에서의 축적기
**** 추가 연습문제: 선교사와 식인종
**** 추가 연습문제: 보드 솔리테어
*** 쉬어가기: 근사값의 본질
**** 고정 길이 수 연산
**** 오버플로
**** 언더플로
**** DrRacket의 수
** 7부 변수의 상태 바꾸기
*** 함수의 메모리
*** 변수의 할당
**** 작업에서의 간단한 할당
**** 순차적 표현 연산
**** 할당과 함수
**** 유용한 첫 예제
*** 메모리를 갖는 함수 디자인하기
메모리를 갖는 함수를 디자인하기 위해서
- 어떤 서비스가 메모리를 *변경* 하는지, 어떤 서비스가 메모리를 *사용* 할 것인지 이해해야 한다
**** 메모리의 필요성
**** 메모리와 상태 변수
**** 메모리르 초기화하는 함수
**** 메모리를 바꾸는 함수
*** 메모리 사용 예
**** 상태 초기화
**** 사용자의 행동으로 인한 상태 변화
**** 재귀 호출로부터의 상태 변화
**** 상태 변화에 관한 몸풀기 문제
**** 추가 연습문제: 장소 탐험
*** 쉬어가기: 최종 구문과 의미
**** 상급자용 Scheme의 어휘
**** 상급자용 Scheme의 문법
**** 상급자용 Scheme의 의미
**** 사급자용 Scheme에서의 오류
** 8부 복합 값 바꾸기
*** 캡슐화
**** 상태 변수가 있는 추상화
**** 캡슐화 연습하기
*** 변경 가능한 구조체
**** 함수로부터의 구조체
**** 변경 가능한 함수 구조체
**** 변경 가능한 구조체
**** 변경 가능한 벡터
**** 변수 바꾸기, 구조체 바꾸기
*** 구조체를 변경하는 함수 디자인하기
**** 왜 구조체를 변경하는가
**** 구조적 디자인 레시피와 변경 1
**** 구조적 디자인 레시피와 변경 2
**** 추가 연습문제: 그림 움직이기 3
*** 동일성
**** 외면적 동일성
**** 내포적 동일성
*** 구조체, 벡터, 객체 바꾸기
**** 벡터 더 연습하기
**** 순환되는 구조체 집합
**** 상태 역추적
