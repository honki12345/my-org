* 리눅스
** 추천의 글
이 책은 커널 서브시스템에 대한 본질적인 이해와, 이를 구현하려고 개발자들이 어떤 일들을 했는지에 대해 알려준다

커널의 특정 부분을 이해하는 가장 좋은 방법은 그 부분을 변경해보는 것이다
- 커널을 직접 수정해보면 코드를 읽기만 할 때는 볼 수 없었던 많은 것들을 이해할 수 있다
- 더 적극적인 커널 개발자라면 개발자 메일링 리스트에 가입해 다른 개발자들과 의견을 나눠 보는 것도 좋다
** 옮긴이의 말
이 책은 세부 코드에 대한 내용은 과감히 생략하고, 더욱 중요한 커널의 설계 방향과 의도를 설명하는데 집중합니다
** 들어가며
*** 이 책의 사용 방법
소스를 읽는 것만으로는 충분하지 않다
여러분은 소스를 파고들어 스스로 변경해봐야 한다
버그를 찾고 고쳐보자
여러분의 하드웨어를 위해 드라이버를 개선해 보자
사소한 기능이라 할지라도 몇 가지 새로운 기능을 추가해보자
가려운 곳을 찾아 긁어라
스스로 코드를 작성할 때에만 모든 것이 여러분의 손에 들어올 것이다
** 1장 리눅스 커널 입문
*** 유닉스의 역사
*** 리눅스의 개발
*** 운영체제와 커널
커널은 시스템의 다른 모든 부분에 기본적인 서비스를 제공하고, 하드웨어를 관리하며, 시스템 자원을 분배하는 소프트웨어다
**** 커널의 주된 구성요소
- 인터럽트 서비스 요청을 처리하는 인터럽트 핸들러
- 프로세서 실행 시간을 여러 프로세스에 분배하는 스케쥴러
- 프로세스 주소 공간을 관리하는 메모리 관리 시스템
- 네트워크나 프로세스간 통신을 처리하는 시스템 서비스

*** 리눅스 커널과 전통적인 유닉스 커널
*** 리눅스 커널 버전
*** 리눅스 커널 개발 공동체
*** 시작하기 전에
** 2장 커널과의 첫 만남
*** 커널 소스 구하기
*** Git 사용하기
*** 커널 소스 설치
*** 패치
*** 커널 소스 트리
*** 커널 빌드
*** 커널 설정
*** 빌드 메시지 최소화
*** 빌드 작업을 동시에 여러 개 실행
*** 새 커널 설치
*** 다른 성질의 야수
**** libc와 표준 헤더 파일을 사용할 수 없음
**** GNU C
**** 인라인 함수
**** 인라인 어셈블리
**** 분기 구문표시
**** 메모리 보호 없음
**** 부동 소수점을 (쉽게) 사용할 수 없음
**** 작은 고정 크기의 스택
**** 동기화와 동시성
**** 이식성의 중요성
*** 결론
** 3장 프로세스 관리
*** 프로세스
*** 프로세스 서술자와 태스크 구조체
*** 프로세스 서술자의 할당
*** 프로세스 서술자 저장
*** 프로세스 상태
*** 현재 프로세스 상태 조작
*** 프로세스 컨텍스트
*** 프로세스 계층 트리
*** 프로세스 생성
*** Copy-on-Write
*** 프로세스 생성(forking)
*** vfork()
*** 리눅스의 스레드 구현
*** 스레드 생성
*** 커널 스레드
*** 프로세스 종료
*** 프로세스 서술자 제거
*** 부모 없는 태스크의 딜레마
*** 결론
** 4장 프로세스 스케줄링
*** 멀티태스킹
*** 리눅스의 프로세스 스케줄러
*** 정책
*** 입출력중심 프로세스와 프로세서중심 프로세스
*** 프로세스 우선순위
*** 타임슬라이스
*** 스케줄러 정책의 동작
*** 리눅스 스케줄링 알고리즘
*** 스케줄러 클래스
*** 유닉스 시스템의 프로세스 스케줄링
*** 공정 스케줄링
*** 리눅스 스케줄링 구현
**** 시간 기록
**** 스케줄러 단위 구조체
**** 가상 실행시간
**** 프로세스 선택
**** 다음 작업 선택
**** 트리에 프로세스 추가
**** 트리에서 프로세스 제거
*** 스케줄러 진입 위치
*** 휴면과 깨어남
**** 대기열
**** 깨어남
*** 선점과 컨텍스트 전환
**** 사용자 선점
**** 커널 선점
*** 실시간 스케줄링 정책
*** 스케줄러 관련 시스템 호출
**** 스케줄링 정책과 우선순위 관련 시스템 호출
**** 프로세서 지속성(affinity) 관련 시스템 호출
**** 프로세서 시간 양보
*** 결론
** 5장 시스템 호출
*** 커널과 통신
*** API, POSIX, C 라이브러리
*** 시스콜
*** 시스템 호출 번호
*** 시스템 호출 성능
*** 시스템 호출 핸들러
*** 알맞은 시스템 호출 찾기
*** 매개변수 전달
*** 시스템 호출 구현
**** 시스템 호출 구현
**** 매개변수 검사
**** 시스템 호출 컨텍스트
**** 시스템 호출 등록을 위한 마지막 단계
*** 사용자 공간에서 시스템 호출 사용
*** 시스템 호출을 구현하지 말아야 하는 이유
*** 결론
** 6장 커널 자료 구조
*** 연결 리스트
**** 단일 연결 리스트와 이중 연결 리스트
**** 환형 연결 리스트
**** 연결 리스트 내에서 이동
**** 리눅스 커널의 구현 방식
**** 연결 리스트 구조체
**** 연결 리스트 정의
**** 리스트 헤드
*** 연결 리스트 조작
**** 연결 리스트에 노드 추가
**** 연결 리스트에서 노드 제거
**** 연결 리스트의 노드 이동과 병합
*** 연결 리스트 탐색
**** 기본 방식
**** 실제 사용하는 방식
**** 역방향으로 리스트 탐색
**** 제거하면서 탐색
**** 다른 연결 리스트 함수
*** 큐
**** kfifo
**** 큐 생성
**** 데이터를 큐에 넣기
**** 데이터를 큐에서 빼기
**** 큐의 크기 알아내기
**** 큐 재설정과 큐 삭제
**** 큐 사용 예제
*** 맵
**** idr 초기화
**** 새로운 UID 할당
**** UID 찾기
**** UID 제거
**** idr 제거
*** 이진 트리
**** 이진 탐색 트리
**** 자가 균형 이진 탐색 트리
**** 레드블랙 트리
**** rbtree
*** 어떤 자료 구조를 언제 사용할 것인가?
**** 알고리즘 복잡도
**** 알고리즘
**** O(빅오, 대문자오) 표기법
**** 빅 세타 표기법
**** 시간 복잡도
*** 결론
** 7장 인터럽트와 인터럽트 핸들러
*** 인터럽트와 인터럽트 핸들러
*** 전반부 처리와 후반부 처리
*** 인터럽트 핸들러 등록
*** 인터럽트 핸들러 플래그
*** 인터럽트 예제
*** 인터럽트 핸들러 해제
*** 인터럽트 핸들러 작성
*** 공유 핸들러
*** 인터럽트 핸들러의 실제 예
*** 인터럽트 컨텍스트
*** 인터럽트 핸들러 구현
*** /proc/interrupts
*** 인터럽트 제어
**** 인터럽트 활성화와 비활성화
**** 특정 인터럽트 비활성화
**** 인터럽트 시스템 상태
*** 결론
** 8장 후반부 처리와 지연된 작업
*** 후반부 처리(bottom half)
*** 왜 후반부 처리를 하는가?
*** 후반부 처리의 세계
**** 원래의 '후반부 처리'
**** 태스크 큐
**** softirq와 태스크릿
**** 혼란스러움을 떨쳐내기
*** softirq
**** softirq 구현
**** softirq 핸들러
**** softirq 실행
**** softirq 사용
***** 인덱스 할당
***** 핸들러 등록
***** softirq 올림
*** 태스크릿(tasklet)
**** 태스크릿 구현
**** 태스크릿 구조체
**** 태스크릿 스케줄링
**** 태스크릿 사용
***** 태스크릿 선언
***** 태스크릿 핸들러 작성
***** 태스크릿 스케줄링
*** ksoftirqd
*** 구식 BH 처리 방식
*** 워크 큐
**** 워크 큐 구현
**** 스레드 표현 자료 구조
**** 작업 표현 자료 구조
**** 워크 큐 구현 정리
**** 워크 큐 사용
***** 작업 생성
***** 워크 큐 핸들러
***** 작업 스케줄링
***** 작업 비우기
***** 새로운 워크 큐 만들기
*** 구식 태스크 큐 방식
*** 어떤 후반부 처리 방식을 사용할 것인가?
*** 후반부 처리 작업 사이의 락
*** 후반부 처리 비활성화
*** 결론
** 9장 커널 동기화 개요
*** 위험 지역과 경쟁 조건
*** 왜 보호 장치가 필요한가?
*** 단일 변수
*** 락
*** 동시성의 원인
*** 보호 대상 인식
*** 데드락
*** 경쟁과 확장성
*** 결론
** 10장 커널 동기화 방법
*** 원자적 동작
**** 원자적 정수 연산
**** 64비트 원자적 연산
**** 원자적 비트 연산
*** 스핀락
**** 스핀락 사용 방법
**** 그 밖의 스핀락 함수
**** 스핀락과 후반부 처리
**** 리더-라이터 스핀락
*** 세마포어
**** 카운팅 세마포어와 바이너리 세마포어
**** 세마포어 생성과 초기화
**** 세마포어
**** 리더-라이터 세마포어
*** 뮤텍스(mutex)
**** 세마포어와 뮤텍스
**** 스핀락과 뮤텍스
*** 완료 변수
*** 큰 커널 락
*** 순차적 락
*** 선점 비활성화
*** 순차성(ordering)과 배리어(barrier)
*** 결론
** 11장 타이머와 시간 관리
*** 커널의 시간의 개념
*** 진동수: HZ
**** 이상적인 HZ 값
**** 큰 HZ 값의 장점
**** 큰 HZ 값의 단점
*** 지피(jiffies)
**** 지피의 내부 표현
**** 지피 값 되돌아감
**** 사용자 공간과 HZ 값
*** 하드웨어 시계와 타이머
**** 실시간 시계
**** 시스템 타이머
*** 타이머 인터럽트 핸들러
*** 날짜와 시간
*** 타이머
**** 타이머 사용
**** 타이머 경쟁 조건
**** 타이머 구현
*** 실행 지연
**** 루프 반복
**** 작은 지연
**** schedule_timeout()
**** schedule_timeout() 구현
**** 만료시간을 가지고 대기열에서 휴면
*** 결론
** 12장 메모리 관리
*** 페이지
*** 구역
*** 페이지 얻기
*** 0으로 채워진 페이지 얻기
*** 페이지 반환
*** kmalloc()
**** gfp_mask 플래그
**** 동작 지정자
**** 구역 지정자
**** 형식 플래그
*** kfree()
*** vmalloc()
*** 슬랩 계층
**** 슬랩 계층 설계
**** 슬랩 할당자 인터페이스
**** 캐시에서 할당
**** 슬랩 할당자 사용 예제
*** 스택에 정적으로 할당
**** 단일 페이지 커널 스택
**** 공정하게 스택 사용
*** 상위 메모리 연결
**** 고정 연결
**** 임시 연결
*** CPU별 할당
**** 새로운 percpu 인터페이스
**** 컴파일 시점의 CPU별 데이터
**** 실행 시점의 CPU별 데이터
**** CPU별 데이터를 사용하는 이유
*** 할당 방법 선택
*** 결론
** 13장 가상 파일시스템
*** 일반 파일시스템 인터페이스
*** 파일시스템 추상화 계층
*** 유닉스 파일시스템
*** VFS 객체와 자료 구조
*** 슈퍼블록 객체
**** 슈퍼블록 동작
*** 아이노드 객체
**** 아이노드 동작
*** 덴트리 객체
**** 덴트리 상태
**** 덴트리 캐시
**** 덴트리 동작
*** 파일 객체
**** 파일 동작
*** 파일시스템 관련 자료 구조
*** 프로세스 관련 자료구조
*** 결론
** 14장 블록 입출력 계층
*** 블록 장치 구조
*** 버퍼와 버퍼 헤드
*** bio 구조체
*** 입출력 벡터
*** 신구 버전 비교
*** 요청 큐
*** 입출력 스케줄러
**** 입출력 스케줄러가 하는 일
**** 리누스 엘리베이터
**** 데드라인 입출력 스케줄러
**** 예측 입출력 스케줄러
**** 완전 공정 큐 입출력 스케줄러
**** 무동작 입출력 스케줄러
**** 입출력 스케줄러 선택
*** 결론
** 15장 프로세스 주소 공간
*** 주소 공간
*** 메모리 서술자
**** 메모리 서술자 할당
**** 메모리 서술자 해제
**** mm_struct 구조체와 커널 스레드
*** 가상 메모리 영역
**** VMA 플래그
**** VMA 동작
**** 메모리 영역 리스트와 트리
*** 실제 메모리 영역
*** 메모리 영역 다루기
**** find_vma()
**** find_vma_prev()
**** find_vma_intersection()
**** mmap()와 do_mmap(): 주소 범위 생성
**** munmap()와 do_munmap(): 주소 범위 해제
*** 페이지 테이블
*** 결론
** 16장 페이지 캐시와 페이지 지연 기록
*** 캐시 사용 방식
**** 쓰기 캐시
**** 캐시 축출
**** 가장 오래 전에 사용한 항목 제거
**** 이중 리스트 전략
*** 리눅스 페이지 캐시
**** address_space 객체
**** address_space 동작
**** 기수 트리
**** 구식 페이지 해시 테이블
*** 버퍼 캐시
*** 플러시 스레드
**** 랩탑 모드
**** 역사: bdflush, kupdated, pdflush
**** 다중 스레드 환경의 경쟁 상태 회피
*** 결론
** 17장 장치와 모듈
*** 장치 유형
*** 모듈
**** Hello, World!
**** 모듈 만들기
***** 소스 트리에 들어 있는 경우
***** 소스 트리 외부에 있는 경우
**** 모듈 설치
**** 모듈 의존성 생성
**** 모듈 적재
**** 설정 옵션 관리
**** 모듈 인자
**** 노출 심볼(exported symbols)
*** 장치 모델
**** Kobjects
**** Ktypes
**** Ksets
**** kobject, ktype, kset의 상관 관계
**** kobject 관리와 변경
**** 참조 횟수
***** 참조 횟수 증감
***** krefs
*** sysfs
**** sysfs에 kobject 추가와 제거
**** sysfs에 파일 추가
**** 기본 속성
**** 새로운 속성 만들기
**** 속성 제거
**** sysfs 관례
*** 커널 이벤트 계층
*** 결론
** 18장 디버깅
*** 시작하기
*** 커널 버그
*** 출력을 이용한 디버깅
**** 견고함
**** 로그수준
**** 로그 버퍼
**** syslogd와 klogd
**** printf()와 printk() 사용 혼동
*** 웁스
**** ksymoops
**** kallsyms
*** 커널 디버깅 옵션
*** 버그 확인과 정보 추출
*** 만능 SysRq 키
*** 커널 디버거의 전설
**** gdb
**** kgdb
*** 시스템 찔러 보기와 조사
**** 조건에 따른 UID 사용
**** 조건 변수
**** 통계
*** 디버깅 작업의 빈도와 발생 제한
*** 문제를 일으킨 변경 사항을 찾기 위한 이진 탐색
**** Git을 사용한 이진 탐색
*** 모든 방법이 실패했을 때: 공동체
*** 결론
** 19장 이식성
*** 이식성 있는 운영체제
*** 리눅스 이식성의 역사
*** 워드 크기와 데이터 형
**** 불투명 데이터 형
**** 특수 데이터 형
**** 명시적으로 크기가 정해진 데이터 형
**** 문자 데이터 형의 부호유무
*** 데이터 정렬
**** 정렬 문제 피하기
**** 비표준 데이터 형의 정렬
**** 구조체 채우기
*** 바이트 순서
*** 시간
*** 페이지 크기
*** 프로세서 순서
*** SMP, 커널 선점, 상위 메모리
*** 결론
** 20장 패치, 해킹, 공동체
*** 공동체
*** 리눅스 코딩 스타일
**** 들여쓰기
**** switch 구문
**** 공백
**** 괄호
**** 줄 길이
**** 명명 방식
**** 함수
**** 주석
**** 형 지정
**** 기존 함수 사용
**** 소스에서 ifdef 사용 최소화
**** 구조체 초기화
**** 과거에 작성한 코드 소급 적용
*** 지휘 계통
*** 버그 리포트 제출
*** 패치
**** 패치 만들기
**** Git을 사용해 패치 생성
**** 패치 제출
*** 결론 커널 심층 분석
