* 코딩테스트 합격자 되기
*** 저자인터뷰
책의 집필방향
- 필요한 내용을 자세히 설명하고
- 무엇을 어떻게 공부해야하는지 설명하자

내가 못 하는지 잘하는지 판단하기보다 내가 무엇을 모르는지 파악하고 학습하는 것이 중요
- 내가 아는 것과 모르는 것을 하나씩 노트에 적어보기
** 첫째마당: 코딩 테스트 사전 준비
*** 코딩 테스트를 준비하기 전에
**** 합격자가 꼭 되고 싶은 여러분
***** 타인의 풀이를 보면 사고를 넓힐 수 있다
***** 나만의 테스트 케이스를 추가하는 건 좋은 알고리즘을 생각할 때 도움이 된다
코드를 작성하기 전(문제를 분석하는 단계에서) 예외 테스트 케이스를 추가해볼 것을 권합니다
**** 아는 것과 모르는 것을 명확하게
알고리즘을 공부하기 어려운 이유는 공부하는 과정에서 아는 것과 모르는 것의 경계가 모호하기 때문
***** 첫 번째, 기록하라
문제를 푸는 과정에서 많이 기록하기

(문제를 못 풀었더라도)어디까지 생각해봤는지 기록하기
- 어떤 알고리즘을 적용하려고 했는지
- 근거는 무엇인지
- 떠올린 알고리즘으로 어떻게 코드를 만들려고 했는지

나중에 답안을 보면서 나의 기록과 비교하며(복기) 효율적으로 공부 가능
***** 두 번째, 시험 보듯 공부하라
시간 배분 전략을 미리 연습하라
긴장감에도 익숙해지게 연습하라
***** 세 번째, 짧은 시간 공부해서는 절대 코딩테스트를 통과할 수 없다
***** 네 번째, 나만의 언어로 요약하라
이해한 뒤에는 *반드시* 요약해보기

이해했는지 확인하는 방법은 이해한 내용을 요약해보는 것
**** 자료구조와 알고리즘, 그리고 코딩 테스트
***** 자료구조와 알고리즘이란?
코딩 테스트 문제 유형
- 1. 분기와 반복을 사용하는 단순 *절차* 문제
- 2. 자료를 어떠한 *구조* 에 담아둬야 효율적인 문제
- 3. 빠른 성능을 위해 이미 연구된 *알고리즘을* 사용하는 문제
- 4. 특정 *사고방식* 으로 접근해야 하는 문제

첫 번째 유형을 제외한 나머지는 *입력 데이터에 대한 분석*, *자료구조와 알고리즘에 대한 지식* 이 필요로 합니다
***** 자료구조와 알고리즘은 세상을 전산화하는 방법입니다
***** 코딩테스트는 업무에 도움이 되는가?
*** 코딩 테스트 효율적으로 준비하기
**** 언어 선택하기
언어는 코딩테스트에서 그렇게 중요한 요소가 아님

활용하는 언어의 기능
- 변수 선언하기
- 함수 정의하기
- 컨테이너 자료형 다루기
- 조건문, 반복문 사용하기

자바스크립트
- 동적 타이핑 언어이므로 타입을 좀 덜 신경써도 됨
- 편리한 문법 제공
- 힙, 조합 등 자료구조, 알고리즘이 빌트인으로 제공되지 않음
**** 문제 분석 연습하기
코딩 테스트는 코딩 능력이 아니라 *문제 풀이 능력* 을 확인하는 것

그러므로 *문제 분석* 에 시간을 충분히 사용해야 한다
2시간에서 4시간 정도 문제 풀 시간이 주어지면 거기서 50-60%는 문제 분석에 시간을 쓴다
***** 첫 번째, 문제를 쪼개서 분석하라
문제를 동작 단위로 쪼개서 분석하라
***** 두 번째, 제약 사항을 파악하고 테스트 케이스를 추가하라
제약사항을 정리해두고 *이를 고려해서* 테스트 케이스를 추가하는 연습을 하라

이 과정은 어떤 알고리즘을 사용할지 고민할 때 유용하고
코드를 구현하는 단계에서 예외를 거를 때 도움이 된다
***** 세 번째, 입력값을 분석하라
보통 시간복잡도는 입력 값이 결정하는 경우가 많음
입력값 크기를 확인하면 문제를 제한시간 내에 풀 수 있는 알고리즘과 그렇지 않은 알고리즘을 미리 걸러낼 수 있음
***** 네 번째, 핵심 키워드를 파악하라
문제를 빨리 해석할려면 문제의 핵심 키워드를 빨리 파악해야 한다

핵심 키워드는 특정 알고리즘을 암시하는 경우가 많다
****** 핵심 키워드에 따른 알고리즘 선택 방법
******* 스택
******** 키워드
- 쌍이 맞는지
- 최근
******** 상황
- 무언가를 저장하고 반대로 처리해야 할 때
- 데이터의 조합이 균형을 이뤄야 할 때
- 알고리즘이 재귀 특성을 가질 때
- 최근 상태 추적
******* 큐
******** 키워드
- 순서대로
- ~대로 동작하는 경우
- 스케줄링
- 최소 시간
******** 상황
- 특정 조건에 따라 시뮬레이션 할 때
- 시작 지점부터 목표지점까지 최단거리
******* 깊이 우선 탐색
******** 키워드
- 모든 경로
******** 상황
- 메모리 사용량이 제한적일 때의 탐색
- 백트래킹 문제를 풀 때
******* 너비 우선 탐색
******** 키워드
- 최적
- 레벨 순회
- 최소 단계
- 네트워크 전파
******** 상황
- 시작 지점부터 최단 경로나 최소 횟수를 찾아야할 때
******* 백트래킹
******** 키워드
- 조합
- 순열
- 부분 집합
******** 상황
- 조합 및 순열 문제
- 특정 조건을 만족하는 부분 집합
******* 최단 경로
******** 키워드
- 최단경로
- 최소시간
- 최소비용
- 트래픽
- 음의 순환
- 단일 출발점 경로
******** 상황
- 다익스트라: 특정 지점에서 나머지 지점까지 가는 최단 경로
- 벨만-포드: 음의 순환 탐지, 음의 가중치를 가진 그래프에서 최단경로
***** 다섯 번째, 데이터 흐름이나 구성을 파악하라
데이터 흐름이나 구성을 파악하는 것도 중요합니다
- e.g. 데이터의 삽입과 삭제가 빈번하게 일어날꺼 같다면 힙자료구조를 고려하는게 좋습니다
**** 의사 코드로 설계하는 연습하기
코딩 테스트에서 설계의 의미는 의사코드를 작성하는 것입니다
의사 코드는 프로그램의 논리를 설명하고 알고리즘을 표현하기 위해 작성한 일종의 지침입니다
***** 첫 번째, 세부 구현이 아닌 동작 중심으로 작성하라
GOOD: 외국어, 영어, 수학 점수를 입력받는다
BAD: 크기가 256 바이트인 문자열 배열을 3개 선언해서 표준 입력으로 국어, 영어, 수학 점수를 입력 받는다
***** 두 번째, 문제 해결 순서로 작성하라
***** 세 번째, 충분히 테스트하라
*** 프로그래머스 완벽 활용 가이드
**** 프로그래머스는 어떤 곳인가요?
**** 프로그래머스 할용 가이드
***** 프로그래머스 살펴보기
***** 문제 풀이 과정 살펴보기
*** 알고리즘의 효율 분석
**** 시간 복잡도란?
***** 1차원 배열 검색하기
***** 알고리즘 수행 시간을 측정하는 방법
***** 최악의 경우 시간 복잡도를 표현하는 빅오 표기법
***** 시간 복잡도를 코딩 테스트에 활용하는 방법
**** 시간 복잡도 계산해보기
***** 별 찍기 문제
***** 박테리아 수명 문제
*** 코딩 테스트 필수 문법
**** 빌트인 데이터 타입
***** 숫자
***** 문자열
***** 그 외 타입
**** 참조 타입
***** 원시 타입의 동작 방식 알아보기
***** 참조 타입의 동작 방식 알아보기
***** 오브젝트
***** 배열
**** 함수
**** 코딩 테스트 코드 구현 노하우
***** 구조 분해 할당
***** 값 교환하기
***** 비구조화 할당
***** 스프레드 연산자
***** 배열 내 같은 요소 제거하기
***** &&와 || 연산자로 조건문 대체하기
** 둘째마당 코딩테스트 완전 정복
*** 배열
**** 배열 개념
***** 배열 선언
***** 배열과 차원
**** 배열의 효율성
***** 배열 연산의 시간 복잡도
***** 배열을 선택할 때 고려할 점
**** 자주 활용하는 배열 기법
***** 배열에 데이터 추가
***** 배열에서 데이터 삭제
***** 고차 함수를 이용하여 데이터에 특정 연산 적용
**** 몸풀기 문제
***** 배열 정렬하기
***** 배열 제어하기
**** 합격자가 되는 모의테스트
***** 두 개 뽑아서 더하기
***** 모의고사
***** 행렬의 곱셈
***** 실패율
***** 방문 길이
*** 스택
**** 스택 개념
***** 스택의 동작 원리 이해하기
**** 스택의 정의
***** 스택의 ADT
**** 몸풀기 문제
***** 괄호 짝 맞추기
***** 10진수를 2진수로 변환하기
**** 합격자가 되는 모의 테스트
***** 괄호 회전하기
***** 짝지어 제거하기
***** 주식 가격
****** 문제 분석하고 풀기
문제를 보자마자 파악할 수 있는건 prices의 길이가 최대 10만이므로 O(N) 알고리즘이 필요하다는 것입니다
- 별다른 알고리즘이 떠오르지 않는다면 O(N^2) 알고리즘으로 코드를 구현해 정확성 테스트 점수를 확보하세요. 그런 다음 효율성 테스트를 위한 생각을 해도 됩니다
******* O(N^2) 알고리즘으로 풀기
각 원소 기준으로 현재 가격보다 더 낮은 가격이 되기 바로 직전까지의 길이
- 기준 주식 가격보다 높은 주식의 개수를 세면 가격이 떨어지지 않은 동안의 초가 됩니다

이 알고리즘은 최악의 경우 O(N^2) 입니다
******* O(N) 알고리즘으로 풀기
연산 횟수를 줄이기 위한 방법 중 쉽게 떠올릴 수 있는 방법은 *불필요한 연산을 줄이는 것입니다*
- 길이를 확정한 주식은 이후 계산에서 제외하기가 연산 줄이기의 핵심입니다


주식이 처음으로 떨어지는 지점을 이용해 다른 지점의 길이를 효율적으로 계산할 겁니다
주식 가격이 처음 떨어진 주식의 뒤가 아니라 *앞의* 주식 가격을 보며 길이를 구합니다

최근 주식부터 그 이전으로 거슬러 올라가며 비교하므로 스택을 사용하면 됩니다
******** 1단계
문자에서 언급한 prices 중 [1,6,9,5]를 구하는 과정을 그림과 함께 알아봅시다
최초에는 비교 대상이 없으므로 초깃값 0 을 스택에 푸시합니다
스택의 값은 prices의 인덱스라고 생각하면 됩니다

스택에 푸시하는 값은 주식의 가격이 아니라 인덱스입니다
이 문제에서 최종으로 구해야 할 값은 '가격이 떨어지지 않은 기간'이기 때문입니다
******** 2단계
prices[top]의 주식 가격과 prices[1]의 주식가격을 비교합니다
prices[1] 이 더 크므로 1으 푸시합니다.
푸시를 한다는 의미는 길이가 확정되지 않았다는 뜻입니다.
같은 방법으로 다음도 비교합니다
prices[top] < prices[2] 이므로 2 를 푸시합니다

이전 단계에서 price[top]은 1이었지만 새로 푸시했으므로 지금 단계에서는 6입니다
******** 3단계
계속해서 price[top]과 price[3]을 비교합니다
price[top] > price[3] 입니다.
이를 통해 우리는 2가지를 알 수 있습니다
첫 번째는 price[top]은 이전 주식 가격이고 지금은 이전 주식 가격이 현재 주식 가격보다 더 크므로 주식이 떨어진 상황이라는 겁니다
두 번째는 price[top]을 팝하지 않으면서 순차적으로 현재 주식 가격까지 비교한 것은 이전까지는 주식 가격이 떨어지지 않았다는 겁니다
***** 크레인 인형 뽑기 게임
****** 문제 분석하고 풀기
1. 바구니가 빈 경우
   1. 무조건 푸시합니다
2. 바구니가 비지 않은 경우
   1. 바구니에 가장 최근에 넣은 인형과 지금 넣으려고 하는 인형이 같은지 비교합니다
      1. 같다면 스택에 있는 원소를 팝하고, 사라진 인형을 셉니다
      2. 같지 않다면 인형을 넣습니다
3. 마지막에 스택의 길이를 출력합니다

배열에서 행이 의미하는 것은 인형의 상하관계입니다
- 행 번호가 높을수록 인형은 아래에 위치하며, 아래에 위치한 인형은 위에 있는 인형을 꺼낸 이후에 꺼낼 수 있습니다
- 이 상하관계는 같은 열에서만 생각합니다
- 다른 열에 있는 인형은 서로 꺼내는 순서에 영향을 주지 않습니다

배열을 스택으로 변환하기
- 각 열은 독립적인 스택으로 관리해야 합니다
- 스택은 LIFO이므로 가장 밑에 있는 인형부터 스택에 푸시해야 합니다
- 배열의 값이 0인 경우는 인형이 없는 빈칸이므로 스택에 푸시하지 않습니다


***** 표 편집
*** 큐
**** 큐의 개념
***** 큐에서 데이터가 이동하는 과정 살펴보기
***** 큐의 특성을 활용하는 분야
***** 큐의 ADT
***** shift() 메서드 사용하기
***** 배열을 이용하는 방식
***** 연결 리스트를 이용하는 방식
**** 몸풀기 문제
***** 요세푸스 문제
**** 합격자가 되는 모의 테스트
***** 기능 개발
***** 카드 뭉치
*** 해시
**** 해시의 개념
***** 해시 자세히 알아보기
***** 해시의 특성을 활용하는 분야
**** 해시 함수
***** 해시 함수를 구현할 때 고려할 내용
***** 자주 사용하는 해시 함수 알아보기
**** 충돌 처리
***** 체이닝으로 처리하기
***** 개방 주소법으로 처리하기
**** 몸풀기 문제
***** 두 개의 수로 특정 값 만들기
***** 문자열 해싱을 이용한 검색 함수 만들기
**** 합격자가 되는 모의 테스트
***** 완주하지 못한 선수
***** 할인 행사
***** 오픈 채팅방
***** 베스트 앨범
***** 신고 결과 받기
***** 메뉴 리뉴얼
*** 트리
**** 트리 개념
***** 나무를 거꾸로 뒤집어 놓은 모양의 트리
**** 이진 트리 표현하기
***** 배열로 표현하기
***** 이진 트리 순회하기
***** 포인터로 표현하기
**** 이진 트리 탐색하기
***** 이진 탐색 트리 구축하기
***** 이진 탐색 트리 탐색하기
***** 이진 탐색 트리와 배열 탐색의 효율 비교
**** 몸풀기 문제
***** 트리 순회
***** 이진 탐색 트리 구현
**** 합격자가 되는 모의 테스트
***** 예상 대진표
***** 다단계 칫솔 판매
***** 미로 탈출
***** 양과 늑대
***** 길 찾기 게임
*** 집합
**** 집합과 상호배타적 집합의 개념
***** 집합의 개념
***** 상호배타적 집합의 특성을 활용하는 분야
**** 집합의 연산
***** 배열을 활용한 트리로 집합 표현하기
***** 유니온-파인드 알고리즘
**** 몸풀기 문제
***** 간단한 유니온-파인드 알고리즘 구현하기
**** 합격자가 되는 모의 테스트
***** 폰켓몬
***** 영어 끝말잇기
***** 전화번호 목록
***** 섬 연결하기
*** 그래프
**** 그래프 개념
***** 그래프 용어 정리
***** 그래프의 특징과 종류
***** 그래프 구현
**** 그래프 탐색
***** 깊이 우선 탐색
***** 너비 우선 탐색
***** 깊이 우선 탐색과 너비 우선 탐색 비교
**** 그래프 최단 경로 구하기
***** 다익스트라 알고리즘
***** 벨만-포드 알고리즘
**** 몸풀기 문제
***** 깊이 우선 탐색 순회
***** 너비 우선 탐색 순회
***** 다익스트라 알고리즘
***** 벨만-포드 알고리즘
**** 합격자가 되는 모의 테스트
***** 게임 맵 최단거리
***** 네트워크
***** 배달
***** 경주로 건설
***** 전략망을 둘로 나누기
*** 백트래킹
**** 백트래킹과 백트래킹 알고리즘 개념
***** 백트래킹이란?
***** 백트래킹 알고리즘이란?
***** 유망 함수란?
***** 백트래킹 알고리즘 문제에 적용해보기
***** N-퀸 문제
**** 몸풀기 문제
***** 1부터 N까지 숫자 중 합 10이 되는 조합 구하기
***** 스도쿠 퍼즐
**** 합격자가 되는 모의 테스트
***** 피로도
***** N-퀸
***** 양궁 대회
***** 외벽 점검
***** 사라지는 발판
*** 정렬
**** 정렬 개념
***** 정렬이 필요한 이유
***** 삽입 정렬
***** 병합 정렬
***** 힙 정렬
***** 우선순위 큐
***** 위상 정렬
***** 계수 정렬
**** 몸풀리 문제
***** 계수 정렬 구현하기
***** 정렬이 완료된 두 배열 합치기
**** 합격자가 되는 모의 테스트
***** 문자열 내 마음대로 정렬하기
***** 정수 내림차순으로 배치하기
***** K번째 수
***** 가장 큰 수
***** 튜플
***** 지형 이동
*** 시뮬레이션
**** 시뮬레이션 문제 풀이 노하우
***** 시뮬레이션 문제를 푸는 방법
***** 행렬 연산
***** 좌표 연산
***** 대칭, 회전 연산
**** 몸풀기 문제
***** 배열 회전하기
***** 두 행렬을 곱한 후 전치 행렬 만들기
***** 달팽이 수열 만들기
**** 합격자가 되는 모의 테스트
***** 이진 변환
***** 롤케이크 자르기
***** 카펫
***** 점프와 순간 이동
***** 캐릭터의 좌표
*** 동적 계획법
**** 동적 계획법 개념
***** 점화식 세우기와 동적 계획법
***** 재귀 호출의 횟수를 줄여주는 메모이제이션
***** 최장 증가 부분 수열
***** 최장 공통 부분 수열
**** 몸풀기 문제
***** LCS 길이 계산하기
***** LIS 길이 계산하기
***** 조약돌 문제
**** 합격자가 되는 모의 테스트
***** 피보나치 수
***** 2 X n 타일링
***** 정수 삼각형
***** 땅따먹기
***** 도둑질
***** 가장 큰 정사각형 찾기
***** 단어 퍼즐
*** 그리디
**** 그리디 개념
***** 그리디 알고리즘으로 거스름돈 내어주기
***** 그리디 알고리즘이 최적해를 보장하려면?
**** 최소 신장 트리
***** 신장 트리란?
***** 최소 신장 트리란?
**** 배낭 문제
***** 잠을 쪼갤 수 있는 부분 배낭 문제
***** 짐을 쪼갤 수 없는 0/1 배낭 문제
**** 몸풀기 문제
***** 거스름돈 주기
***** 부분 배낭 문제
**** 합격자가 되는 모의 테스트
***** 예산
***** 구명보트
***** 귤 고르기
***** 기지국 설치
** 코딩테스트 모의고사
