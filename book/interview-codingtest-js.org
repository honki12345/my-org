* 코딩테스트 합격자 되기
*** 저자인터뷰
책의 집필방향
- 필요한 내용을 자세히 설명하고
- 무엇을 어떻게 공부해야하는지 설명하자

내가 못 하는지 잘하는지 판단하기보다 내가 무엇을 모르는지 파악하고 학습하는 것이 중요
- 내가 아는 것과 모르는 것을 하나씩 노트에 적어보기
** 첫째마당: 코딩 테스트 사전 준비
*** 코딩 테스트를 준비하기 전에
**** 합격자가 꼭 되고 싶은 여러분
***** 타인의 풀이를 보면 사고를 넓힐 수 있다
***** 나만의 테스트 케이스를 추가하는 건 좋은 알고리즘을 생각할 때 도움이 된다
코드를 작성하기 전(문제를 분석하는 단계에서) 예외 테스트 케이스를 추가해볼 것을 권합니다
**** 아는 것과 모르는 것을 명확하게
알고리즘을 공부하기 어려운 이유는 공부하는 과정에서 아는 것과 모르는 것의 경계가 모호하기 때문
***** 첫 번째, 기록하라
문제를 푸는 과정에서 많이 기록하기

(문제를 못 풀었더라도)어디까지 생각해봤는지 기록하기
- 어떤 알고리즘을 적용하려고 했는지
- 근거는 무엇인지
- 떠올린 알고리즘으로 어떻게 코드를 만들려고 했는지

나중에 답안을 보면서 나의 기록과 비교하며(복기) 효율적으로 공부 가능
***** 두 번째, 시험 보듯 공부하라
시간 배분 전략을 미리 연습하라
긴장감에도 익숙해지게 연습하라
***** 세 번째, 짧은 시간 공부해서는 절대 코딩테스트를 통과할 수 없다
***** 네 번째, 나만의 언어로 요약하라
이해한 뒤에는 *반드시* 요약해보기

이해했는지 확인하는 방법은 이해한 내용을 요약해보는 것
**** 자료구조와 알고리즘, 그리고 코딩 테스트
***** 자료구조와 알고리즘이란?
코딩 테스트 문제 유형
- 1. 분기와 반복을 사용하는 단순 *절차* 문제
- 2. 자료를 어떠한 *구조* 에 담아둬야 효율적인 문제
- 3. 빠른 성능을 위해 이미 연구된 *알고리즘을* 사용하는 문제
- 4. 특정 *사고방식* 으로 접근해야 하는 문제

첫 번째 유형을 제외한 나머지는 *입력 데이터에 대한 분석*, *자료구조와 알고리즘에 대한 지식* 이 필요로 합니다
***** 자료구조와 알고리즘은 세상을 전산화하는 방법입니다
***** 코딩테스트는 업무에 도움이 되는가?
*** 코딩 테스트 효율적으로 준비하기
**** 언어 선택하기
**** 문제 분석 연습하기
***** 첫 번째, 문제를 쪼개서 분석하라
***** 두 번째, 제약 사항을 파악하고 테스트 케이스를 추가하라
***** 세 번째, 입력값을 분석하라
***** 네 번째, 핵심 키워드를 파악하라
***** 다섯 번째, 데이터 흐름이나 구성을 파악하라
**** 의사 코드로 설계하는 연습하기
***** 첫 번째, 세부 구현이 아닌 동작 중심으로 작성하라
***** 두 번째, 문제 해결 순서로 작성하라
***** 세 번째, 충분히 테스트하라
*** 프로그래머스 완벽 활용 가이드
**** 프로그래머스는 어떤 곳인가요?
**** 프로그래머스 할용 가이드
***** 프로그래머스 살펴보기
***** 문제 풀이 과정 살펴보기
*** 알고리즘의 효율 분석
**** 시간 복잡도란?
***** 1차원 배열 검색하기
***** 알고리즘 수행 시간을 측정하는 방법
***** 최악의 경우 시간 복잡도를 표현하는 빅오 표기법
***** 시간 복잡도를 코딩 테스트에 활용하는 방법
**** 시간 복잡도 계산해보기
***** 별 찍기 문제
***** 박테리아 수명 문제
*** 코딩 테스트 필수 문법
**** 빌트인 데이터 타입
***** 숫자
***** 문자열
***** 그 외 타입
**** 참조 타입
***** 원시 타입의 동작 방식 알아보기
***** 참조 타입의 동작 방식 알아보기
***** 오브젝트
***** 배열
**** 함수
**** 코딩 테스트 코드 구현 노하우
***** 구조 분해 할당
***** 값 교환하기
***** 비구조화 할당
***** 스프레드 연산자
***** 배열 내 같은 요소 제거하기
***** &&와 || 연산자로 조건문 대체하기
** 둘째마당 코딩테스트 완전 정복
*** 배열
**** 배열 개념
***** 배열 선언
***** 배열과 차원
**** 배열의 효율성
***** 배열 연산의 시간 복잡도
***** 배열을 선택할 때 고려할 점
**** 자주 활용하는 배열 기법
***** 배열에 데이터 추가
***** 배열에서 데이터 삭제
***** 고차 함수를 이용하여 데이터에 특정 연산 적용
**** 몸풀기 문제
***** 배열 정렬하기
***** 배열 제어하기
**** 합격자가 되는 모의테스트
***** 두 개 뽑아서 더하기
***** 모의고사
***** 행렬의 곱셈
***** 실패율
***** 방문 길이
*** 스택
**** 스택 개념
***** 스택의 동작 원리 이해하기
**** 스택의 정의
***** 스택의 ADT
**** 몸풀기 문제
***** 괄호 짝 맞추기
***** 10진수를 2진수로 변환하기
**** 합격자가 되는 모의 테스트
***** 괄호 회전하기
***** 짝지어 제거하기
***** 주식 가격
***** 크레인 인형 뽑기 게임
***** 표 편집
*** 큐
**** 큐의 개념
***** 큐에서 데이터가 이동하는 과정 살펴보기
***** 큐의 특성을 활용하는 분야
***** 큐의 ADT
***** shift() 메서드 사용하기
***** 배열을 이용하는 방식
***** 연결 리스트를 이용하는 방식
**** 몸풀기 문제
***** 요세푸스 문제
**** 합격자가 되는 모의 테스트
***** 기능 개발
***** 카드 뭉치
*** 해시
**** 해시의 개념
***** 해시 자세히 알아보기
***** 해시의 특성을 활용하는 분야
**** 해시 함수
***** 해시 함수를 구현할 때 고려할 내용
***** 자주 사용하는 해시 함수 알아보기
**** 충돌 처리
***** 체이닝으로 처리하기
***** 개방 주소법으로 처리하기
**** 몸풀기 문제
***** 두 개의 수로 특정 값 만들기
***** 문자열 해싱을 이용한 검색 함수 만들기
**** 합격자가 되는 모의 테스트
***** 완주하지 못한 선수
***** 할인 행사
***** 오픈 채팅방
***** 베스트 앨범
***** 신고 결과 받기
***** 메뉴 리뉴얼
*** 트리
**** 트리 개념
***** 나무를 거꾸로 뒤집어 놓은 모양의 트리
**** 이진 트리 표현하기
***** 배열로 표현하기
***** 이진 트리 순회하기
***** 포인터로 표현하기
**** 이진 트리 탐색하기
***** 이진 탐색 트리 구축하기
***** 이진 탐색 트리 탐색하기
***** 이진 탐색 트리와 배열 탐색의 효율 비교
**** 몸풀기 문제
***** 트리 순회
***** 이진 탐색 트리 구현
**** 합격자가 되는 모의 테스트
***** 예상 대진표
***** 다단계 칫솔 판매
***** 미로 탈출
***** 양과 늑대
***** 길 찾기 게임
*** 집합
**** 집합과 상호배타적 집합의 개념
***** 집합의 개념
***** 상호배타적 집합의 특성을 활용하는 분야
**** 집합의 연산
***** 배열을 활용한 트리로 집합 표현하기
***** 유니온-파인드 알고리즘
**** 몸풀기 문제
***** 간단한 유니온-파인드 알고리즘 구현하기
**** 합격자가 되는 모의 테스트
***** 폰켓몬
***** 영어 끝말잇기
***** 전화번호 목록
***** 섬 연결하기
*** 그래프
**** 그래프 개념
***** 그래프 용어 정리
***** 그래프의 특징과 종류
***** 그래프 구현
**** 그래프 탐색
***** 깊이 우선 탐색
***** 너비 우선 탐색
***** 깊이 우선 탐색과 너비 우선 탐색 비교
**** 그래프 최단 경로 구하기
***** 다익스트라 알고리즘
***** 벨만-포드 알고리즘
**** 몸풀기 문제
***** 깊이 우선 탐색 순회
***** 너비 우선 탐색 순회
***** 다익스트라 알고리즘
***** 벨만-포드 알고리즘
**** 합격자가 되는 모의 테스트
***** 게임 맵 최단거리
***** 네트워크
***** 배달
***** 경주로 건설
***** 전략망을 둘로 나누기
*** 백트래킹
**** 백트래킹과 백트래킹 알고리즘 개념
***** 백트래킹이란?
***** 백트래킹 알고리즘이란?
***** 유망 함수란?
***** 백트래킹 알고리즘 문제에 적용해보기
***** N-퀸 문제
**** 몸풀기 문제
***** 1부터 N까지 숫자 중 합 10이 되는 조합 구하기
***** 스도쿠 퍼즐
**** 합격자가 되는 모의 테스트
***** 피로도
***** N-퀸
***** 양궁 대회
***** 외벽 점검
***** 사라지는 발판
*** 정렬
**** 정렬 개념
***** 정렬이 필요한 이유
***** 삽입 정렬
***** 병합 정렬
***** 힙 정렬
***** 우선순위 큐
***** 위상 정렬
***** 계수 정렬
**** 몸풀리 문제
***** 계수 정렬 구현하기
***** 정렬이 완료된 두 배열 합치기
**** 합격자가 되는 모의 테스트
***** 문자열 내 마음대로 정렬하기
***** 정수 내림차순으로 배치하기
***** K번째 수
***** 가장 큰 수
***** 튜플
***** 지형 이동
*** 시뮬레이션
**** 시뮬레이션 문제 풀이 노하우
***** 시뮬레이션 문제를 푸는 방법
***** 행렬 연산
***** 좌표 연산
***** 대칭, 회전 연산
**** 몸풀기 문제
***** 배열 회전하기
***** 두 행렬을 곱한 후 전치 행렬 만들기
***** 달팽이 수열 만들기
**** 합격자가 되는 모의 테스트
***** 이진 변환
***** 롤케이크 자르기
***** 카펫
***** 점프와 순간 이동
***** 캐릭터의 좌표
*** 동적 계획법
**** 동적 계획법 개념
***** 점화식 세우기와 동적 계획법
***** 재귀 호출의 횟수를 줄여주는 메모이제이션
***** 최장 증가 부분 수열
***** 최장 공통 부분 수열
**** 몸풀기 문제
***** LCS 길이 계산하기
***** LIS 길이 계산하기
***** 조약돌 문제
**** 합격자가 되는 모의 테스트
***** 피보나치 수
***** 2 X n 타일링
***** 정수 삼각형
***** 땅따먹기
***** 도둑질
***** 가장 큰 정사각형 찾기
***** 단어 퍼즐
*** 그리디
**** 그리디 개념
***** 그리디 알고리즘으로 거스름돈 내어주기
***** 그리디 알고리즘이 최적해를 보장하려면?
**** 최소 신장 트리
***** 신장 트리란?
***** 최소 신장 트리란?
**** 배낭 문제
***** 잠을 쪼갤 수 있는 부분 배낭 문제
***** 짐을 쪼갤 수 없는 0/1 배낭 문제
**** 몸풀기 문제
***** 거스름돈 주기
***** 부분 배낭 문제
**** 합격자가 되는 모의 테스트
***** 예산
***** 구명보트
***** 귤 고르기
***** 기지국 설치
** 코딩테스트 모의고사
