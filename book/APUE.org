* Advanced Programming in the UNIX Environment
** 제1장 UNIX 시스템 개요
*** 소개
*** UNIX 기반구조
*** 로그인
*** 파일과 디렉터리
*** 입력과 출력
*** 프로그램과 프로세스
*** 오류처리                                                    :minishell:
헤더파일 '<errno.h>'에는 기호 'errno'와 'errno'에 설정될 수 있는 각 값에 대한 상수들이 정의되어 있다

규칙
- 어떤 루틴에서 오류가 없었다고 해서 'errno'의 값이 비워지지 않는다
  따라서 'errno'의 값은 함수의 반환값을 통해서 오류가 발생했음을 확인한 경우에만 점검해야 한다
- 'errno'의 값을 0으로 설정하는 함수는 없으며, '<errno.h>'에 정의된 상수들 중 값이 0인 것은 없다
**** strerror()
#+begin_src C
  #include <string.h>

  // 반환값: 메시지 문자열을 가리키는 포인터
  char *strerror(int errnum);
#+end_src
주어진 'errnum'에 해당하는 오류 메시지 문자열을 가리키는 문자열을 돌려준다
**** perror()
#+begin_src C
  #include <stdio.h>

  void perror(const char *msg);
#+end_src
'perror' 함수는 'errno'의 현재 값에 해당하는 오류메시지를 *표준 오류에 출력한 후* 반환된다
이 함수는 먼저 'msg'가 가리키는 문자열을 출력하고,
그런 다음 콜론(:) 하나와 빈 칸, 그리고 'errno' 값에 해당하는 오류메시지를 출력하고, 마지막으로 새 줄을 출력한다

#+begin_src C
  #include "apue.h"
  #include <errno.h>

  int main(int argc, char *argv[])
  {
    fprintf(stderr, "EACCES: %s\n", strerror(EACCES));
    errno = ENOENT;
    perror(argv[0]);
    exit(0);
  }
#+end_src
*** 사용자 식별
*** 신호
*** 시간 값
*** 시스템 호출과 라이브러리 함수
*** 요약
** 제2장 UNIX 표준화와 구현들
*** 소개
*** UNIX 표준화
*** UNIX 시스템의 구현들
*** 표준과 구현의 관계
*** 한계들
*** 옵션들
*** 기능 검사 매크로
*** 기본 시스템 자료 형식
예전부터 C의 일부 자료 형식은 UNIX의 특정 시스템 변수들과 연관이 있다
(예를 들어, 주(major)-부(minor) 장치번호는 16비트 짧은 정수에 저장되었다)

~<sys/types.h>~ 헤더는 몇가지 구현 의존적 자료 형식들을 정의한다.
그런 형식들을 **기본 시스템 자료 형식(primitive system data type)**이라고 부른다
이 자료형식들은 헤더파일들 안에 C의 typedef 기능을 이용해 정의되고, 대부분 '_t'로 끝난다

이런 자료 형식들 덕분에 응용 프로그램을 작성할 때 시스템마다 다를 수 있는 구현 세부사항을 소스 코드 안에 직접 포함시켜 둘 필요가 없다
*** 표준들의 차이
기본 시스템 자료 형식
- size_t: 객체(문자열 등)의 크기(부호 없음)
- ssize_t: 바이트 개수를 돌려주는 함수의 반환값 형식(부호 있음)
*** 요약
** 제3장 파일 입출력
*** 소개
*** 파일 서술자
*** open 함수와 openat 함수                                     :minishell:
*** creat 함수
*** close 함수                                                  :minishell:
*** lseek 함수
*** read 함수                                                   :minishell:
#+begin_src C
  #include <unistd.h>

  // 반환값: 읽은 바이트 수, 파일 끝이면 0, 오류 시 -1
  ssize_t read(int fd, void *buf, size_t nbytes);
#+end_src
read 호출이 성공하면 읽어들인 바이트 개수가 반환된다.
파일 끝에 도달한 경우에는 0이 반환된다
몇몇 경우들에서는 반환값이 요청한 바이트 수보다 적을 수 있다

읽기 연산은 파일의 현재 오프셋에서 시작한다.
읽기가 성공한 경우 호출이 반횐되기 전에 오프셋이 실제로 읽은 바이트 수만큼 증가한다
*** write 함수                                                  :minishell:
#+begin_src C
  #include <unistd.h>

  // 반환값: 성공 시 기록된 바이트 수, 오류 시 -1
  ssize_t write(int fd, const void *buf, size_t nbytes);
#+end_src
보통의 경우 반환값은 'nbytes' 인수와 동일하다
그렇지 않으면 오류가 발생한 것이다
흔히 디스크에 남은 용량이 없거나
주어진 프로세스에 대한 파일 크기 한계를 넘었을 때 오류가 발생한다

정규 파일에 대한 쓰기 연산은 파일의 현재 오프셋에서 시작한다

지정된 파일을 열 때 'O_APPEND' 옵션을 지정했다면,
각 호출마다 먼저 파일 오프셋이 파일의 현재 끝으로 설정된 후에 쓰기 연산이 진행된다.
쓰기 연산이 성공하면 파일의 오프셋이 실제로 기록된 바이트 수만큼 증가한다
*** 입출력 효율성
#+begin_src C
  #include "apue.h"

  #define BUFFSIZE 4096

  int main(void)
  {
    int n;
    char buf[BUFFSIZE];

    while ((n = read(STDIN_FILENO, buf, BUFFSIZE)) > 0)
      if (write(STDOUT_FILENO, buf, n) != n)
        err_sys("write error");

    if (n < 0)
      err_sys("read error");

    exit(0);
  }
#+end_src
*** 파일 공유
**** 원자적 연산
*** dup 함수와 dup2 함수                                        :minishell:
*** sync 함수, fsync 함수, fdatasync 함수
*** fcntl 함수
*** ioctl 함수                                                  :minishell:
*** '/dev/fd'
*** 요약
** 제4장 파일과 디렉터리
*** 소개
*** stat, fstat, fstatat, lstat 함수                            :minishell:
*** 파일 종류
*** 사용자-ID-설정(SUID)비트와 그룹-ID-설정(SGUID) 비트
*** 파일 접근 권한
*** 새 파일과 디렉터리의 소유권
*** access 함수와 faccessat 함수                                :minishell:
파일을 열 때 커널은 유효 사용자 ID와 유효 그룹 ID에 근거해서 접근 허용 판정을 수행한다
그런데 접근 허용 판정이 실제 사용자 ID와 실제 그룹 ID에 근건해서 수행되길 프로세스가 원할 수 있다
이런 상황에서 'access'함수와 'faccessat' 함수는 실제 사용자 ID와 실제 그룹 ID에 근거해서 그러한 판정을 수행한다

#+begin_src C
  #include <unistd.h>

  // 반환 값: 성공시 0, 오류시 -1
  int access(const char *pathname, int mode);
  int faccessat(int fd, const char *pathname, int mode, int flag);
#+end_src
'mode'에는 파일의 존재 여부를 알고 싶으면 'F_OK'를 지정하고
그 외의 경우에는 플래그들을 임의로 결합해서 (비트별 논리합으로) 지정한다

mode 인수 플래그들
- R_OK: 읽기 권한 판정
- W_OK: 쓰기 권한 판정
- X_OK: 실행 권한 판정

#+begin_src C
  #include "apue.h"
  #include <fcntl.h>

  int main(int argc, char *argv[])
  {
    if (argc != 2)
      err_quit("usage: a.out <pathname>");
    if (access(argv[1], R_OK) < 0)
      err_ret("access error for "%s", argv[1]);
    else
      printf("read access OK\n");
    if (open(argv[1], O_RDONLY) < 0)
      err_ret("open error for %s", argv[1]);
    else
      printf("open for reading OK\n");
    exit(0);
  }
#+end_src
*** umask 함수
*** chmod, fchmod, chmodat 함수
*** 끈적이 비트
*** chown, fchown, fchownat, lchown 함수
*** 파일 크기
*** 파일 절단
*** 파일 시스템
*** link, linkat, unlink, unlinkat, remove 함수                 :minishell:
*** rename 함수와 renameat 함수
*** 기호 링크
*** 기호 링크의 생성과 읽기
*** 파일 시간
*** futimens, utimensat, utimes 함수
*** mkdir, mkdirat, rmdir 함수
*** 디렉터리 읽기                                               :minishell:
*** chdir, fchdir, getcwd 함수                                  :minishell:
*** 장치 특수 파일
*** 파일 접근 권한 비트 정리
*** 요약
** 제5장 표준 입출력 라이브러리
*** 소개
*** 스트림과 FILE 객체
*** 표준 입력, 표준 출력, 표준 오류
*** 버퍼링
*** 스트림 열기
*** 스트림 읽고 쓰기
*** 줄 단위 입출력
*** 표준 입출력의 효율성
*** 이진 입출력
*** 스트림 위치 조회 및 설정
*** 서식화된 입출력                                             :minishell:
*** 구현 세부사항
*** 임시 파일
*** 메모리 스트림
*** 표준 입출력 라이브러리의 대안들
*** 요약
** 제6장 시스템 자료 파일과 시스템 정보
** 제7장 프로세스 환경
*** 소개
*** main 함수
*** 프로세스 종료
*** 명령줄 인수
*** 환경 목록
*** C 프로그램의 메모리 배치
*** 공유 라이브러리
*** 메모리 할당                                                 :minishell:
*** 환경 변수                                                   :minishell:
*** setjmp 함수와 longjmp 함수
*** getrlimit 함수와 setrlimit 함수
*** 요약
** 제8장 프로세스 제어
*** 소개
*** 프로세스 식별자
*** fork 함수                                                   :minishell:
*** vfork 함수
*** exit 함수                                                   :minishell:
*** wait 함수와 waitpid 함수                                    :minishell:
*** waitid 함수
*** wait3 함수와 wait4 함수                                     :minishell:
*** 경쟁 조건
*** exec류 함수들                                               :minishell:
#+begin_src C
  #include "apue.h"
  #include <sys/wait.h>

  char *env_init[] = { "USER=unknown", "PATH=/tmp", NULL };

  int main(void)
  {
    pid_t pid;

    if ((pid = fork()) < 0) {
      err_sys("fork error");
    } else if (pid == 0) { /* 경로이름과 환경을 지정해서 실행 */
      if (execle("/home/sar/bin/echoall", "echoall", "myarg1", "MY ARG2", (char *)0, env_init) < 0)
        err_sys("execle error");
    }

    if (waitpid(pid, NULL, 0) < 0)
      err_sys("wait error");
    if ((pid = fork()) < 0) {
      err_sys("fork error");
    } else if (pid == 0) { /* 파일 이름은 지정하고 환경은 물려준다 */
      if (execlp("echoall", "echoall", "only 1 arg", (char *) 0) < 0)
        err_sys("execlp error");
    }

    exit(0);
  }
#+end_src
*** 사용자 ID와 그룹 ID의 변경
*** 해석기 파일
*** system 함수
*** 프로세스 회계
*** 사용자 식별
*** 프로세스 스케줄링
*** 프로세스 시간
*** 요약
** 제9장 프로세스 관계
** 제10장 신호
*** 소개
*** 신호의 개념
*** signal 함수                                                 :minishell:
*** 신뢰성 없는 신호
*** 가로채인 시스템 호출
*** 재진입 함수
*** SIGCLD 신호의 의미론
*** kill 함수와 raise 함수                                      :minishell:
*** alaram 함수와 pause 함수
*** 신호 집합                                                   :minishell:
*** sigprocmask 함수
*** sigpending 함수
*** sigaction 함수                                              :minishell:
*** sigsetjmp 함수와 siglongjmp 함수
*** siguspend 함수
*** abort 함수
*** system 함수
*** sleep, nanosleep, clock_nanosleep 함수
*** sigqueue 함수
*** 작업 제어 신호
*** 신호의 이름과 번호
*** 요약
** 제11장 스레드
** 제12장 스레드 제어
** 제13장 데몬 프로세스
** 제14장 고급 입출력
** 제15장 프로세스 간 통신
*** 소개
*** 파이프                                                      :minishell:
*** popen 함수와 pclose 함수
*** 협동 프로세스
*** FIFO
*** XSI IPC
*** 메시지 대기열
*** 세마포
*** 공유 메모리
*** POSIX 세마포
*** 클라이언트-서버 속성들
*** 요약
** 제16장 네트워크 IPC: 소켓
** 제17장 고급 IPC
** 제18장 터미널 입출력
*** 소개
*** 개요
*** 특수 입력 문자
*** 터미널 특성들의 조회와 설정                                 :minishell:
*** 터미널 옵션 플래그들
*** stty 명령
*** 보드율 함수들
*** 회선 제어 함수들
*** 터미널 식별                                                 :minishell:
*** 표준 모드
*** 비표준 모드
*** 터미널 창 크기
*** termcap, terminfo, curses
*** 요약
** 제19장 유사 터미널
** 제20장 데이터베이스 라이브러리 예제
** 제21장 네트워크 프린터와의 통신
