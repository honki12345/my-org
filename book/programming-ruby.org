* programming ruby
** Preface
*** Why Ruby?
You can concentrate on solving the problem at hand, instead of struggling with compiler and language issues. 
*** A Word about Ruby Versions
*** Notation Conventions
- instance method
  - ~Fred#do_somehting~
- class method
  - ~Fred.new~
  - ~Fred::new~
- class constant
  - ~Fred.EOF~
*** Road Map
*** Resources
** Acknowledgments
** Part Ⅰ. Facets of Ruby
*** Getting Started
**** Installing Ruby
**** Installing Ruby for Windows
**** Running Ruby
Interactive Ruby, *irb* is the tool of choice for executing Ruby interactively
Irb is a complete Ruby shell, with command-line history, line-editing capabilities, and job control.
***** What about Docker?
Docker is a tool that allows you to define and run *containers*
A container is a way to package all the dependencies needed to run code - it's virtual operating system inside your computer
**** Creating Ruby Programs
**** Getting More Information about Ruby
***** ri
command-line tool for the Ruby core documentation

To find the documentation for a class, method
~ri '<classname or method>~
**** What's Next
*** Ruby.new
**** Ruby Is an Object-Oriented Language
The standard constructor is called *new* .

Every object has a unique object identifier
(abbreviated as object id), accessible via the property object_id

The item before the dot is called the *receiver* of the method, and what comes after the period is the name of the method to be invoked.

When we talk about methods being sent, we often say that we send a *message* to the object
**** Some Basic Ruby
In the double-quoted case,
First, it looks for *substitution* sequences that start with a backslash character and replaces them with some binary value (e.g. '\n')
The second thing that Ruby does with double-quoted strings is expression interpolation. Within the string, the sequence #{EXPRESSION} is replaced by the value of EXPRESSION

In the absence of an explicit return statement, the value returned by a Ruby method is the value of the last expression evaluated

Local Variable: name
Instance Variable: @name
Class Variable: @@name
Global Variable: $name
Class Name: Name
Constant Name: YOUR_NAME
**** Arrays and Hashes
An *Array* is a linear list of objects, you retrieve them via their index

A *Hash* is an association,
- Most generically, the key and value are separated by *=>*
- The *order* of the keys in the hash is stable and will always match the order in which the keys were added to the hash.
- The default behavior of a hash when indexed by a key it doesn’t contain is to return *nil*
- This can be done by specifying a default value when you create a new, empty hash:
#+begin_src ruby
  histogram = Hash.new(0)       # The default value is zero
  histogram["ruby"]             # => 0
#+end_src

*nil* is an object, just like any other. It’s an object that represents the concept of nothing
**** Symbols
*Symbols* are meant to be used as keys and identifiers,
while *strings* are meant to be used for data.

A symbol literal starts with a colon
- We don’t need to declare the symbols or assign them a value
- The value of a symbol is equivalent to its name.
- no matter where they appear in your program, symbols with the same name will have the same value—indeed,
  they’ll be the same internal object.

You can use ~name: value~ pairs to create a hash instead of ~name => value~ if the key is a symbol:
**** Control Structures
**** Regular Expressions
**** Blocks
**** Reading and 'Riting
**** Command-Line Arguments
**** Commenting Ruby
**** What's Next
*** Classes, Objects, and Variables
**** Defining Classes
**** Objects and Attributes
**** Classes Working with Other Classes
**** Specifying Access Control
**** Variables
**** Reopening Classes
**** What's Next
*** Collections, Blocks, and Iterators
**** Arrays
**** Hashes
**** Digging
**** Word Frequency: Using Hashes and Arrays
**** Block and Enumeration
**** What's Next
*** More about Methods
**** Defining a Method
**** Calling a Method
**** What's Next
*** Sharing Functionality: Inheritance, Modules, and Mixins
**** Inheritance and Messages
**** Modules
**** Inheritance, Mixins, and Design
**** What's Next
*** Basic Types: Numbers, Strings, and Ranges
**** Numbers
**** Strings
**** Ranges
**** What's Next
*** Regular Expressions
**** What Regular Expressions Let You Do
**** Creating and Using Regular Expressions
**** Regular Expression Patterns
**** Regular Expression Syntax
**** What's Next
*** Expressions
**** Operator Expressions
**** Command Expressions
**** Assignment
**** Conditional Execution
**** Loops and Iterators
**** Pattern Matching
**** What's Next
*** Exceptions
**** The Exception Class
**** Handling Exceptions
**** Raising Exceptions
**** Using Catch and Throw
**** What's Next
*** Basic Input and Output
**** What Is an I/O Object?
**** Opening and Closing Files
**** Reading and Writing Files
**** Talking to Networks
**** What's Next
*** Threads, Fibers, and Ractors
**** Multithreading with Threads
**** Running Multiple External Processes
**** Creating Fibers
**** Understanding Ractors
**** What's Next
*** Testing Ruby Code
**** Why Unit Test?
**** Testing with Minitest
**** structuring Tests
**** Creating Mock Objects in Minitest
**** Organizing and Running Tests
**** Testing with RSpec
**** What's Next
** Part Ⅱ. Ruby in Its Setting
*** Ruby from the Command Line
**** Calling the Ruby Command
**** Ruby Command-Line Options
**** Making Your Code an Executable Program
**** Processing Command-Line Arguments to Your Code
**** Accessing Environment Variables
**** Where Ruby Finds Its Libraries
**** Using the Rake Build Tool
**** The Build Environment
**** What's Next
*** Ruby Gems
**** Installing and Managing Gems
**** Using Bundler to Manager Groups of Gems
**** Writing and Packaging Your Own Code into Gems
**** Organizing Your Source Code
**** Distributing and Installing Your Code
**** What's Next
*** Interactive Ruby
**** Using irb
**** Navigating irb
**** Configuring irb
**** What's Next
*** Debugging Ruby
**** Printing Things
**** The Ruby Debugger
**** Pry
**** debugging Performance Issues with Benchmark
**** What's Next
*** Typed Ruby
**** What's a Type?
**** Official Ruby Typing with RBS
**** Ruby Typing with Sorbet
**** What's Next
*** Documenting Ruby
**** Documenting with RDoc
**** Adding RDoc to Ruby Code
**** Running RDoc
**** Documenting with YARD
**** What's Next
** Part Ⅲ. Ruby Crystallized
*** Ruby and the Web
**** Ruby's Web Utilities
**** Templating with ERB
**** Serving Ruby Code to the Web
**** Ruby in the Browser with Web Assembley
**** What's Next
*** Ruby Style
**** Written Ruby Style
**** Using RuboCop
**** Using Standard
**** Ruby Style in the Large
**** Duck Typing
Its' really?!!!
**** What's Next
*** The Ruby Object Model and Metaprogramming
**** Understanding Objects and Classes
**** Defining Singleton methods
**** Inheritance and Visibility
**** Modules and Mixins
**** Metaprogramming Class-Level Macros
**** Using instance eval and class eval
**** Using Hook Methods
**** A Metaprogramming Example
**** Top-Level Execution Environment
**** What's Next
*** Reflection and Object Space
**** Looking at Objects
**** Looking at Classes
**** Calling Methods Dynamically
**** System Hooks
**** Tracing Your Program's Execution
**** Behind the Curtain: The Ruby VM
**** Marshaling and Distributed Ruby
**** What's Next
