* 효율적 개발로 이끄는 파이썬 실천기술
** ch01 파이썬이란 어떤 언어인가?
*** 프로그래밍 언어로서의 특징
**** 간단하고 읽기 쉬운 동적 타입 언어
***** 들여쓰기를 이용한 블록 표현
***** 교육용 프로그래밍 언어 ABC의 영향
**** 하위 호환성 중시
**** 풍부한 표준 라이브러리
**** 다양한 용도로 이용
*** 파이썬의 역사와 현황
**** 파이썬 자체의 진화
***** 파이썬의 탄생
***** 파이썬 2계열에서 메이저 언어로
***** 파이썬 3계열로의 이동
***** 파이썬의 최근 상황
**** 파이썬을 둘러싼 환경의 변화
*** 파이썬 커뮤니티의 특징
**** 커뮤니티 주체 오픈소스 소프트웨어
***** 파이콘 - 파이썬 사용자들이 모이는 컨퍼런스
**** PEP의 존재
***** PEP8: style guide for python code - 파이썬 표준 스타일 가이드
***** PEP20: The Zen of Python - 파이썬 설계 가이드라인
***** PEP257: Docstring Conventions - 문서 작성 방법
*** 정리
** ch02 파이썬 설치와 개발자를 위한 편리한 기능
*** 파이썬 설치
**** OS에 미리 설치되어 있는 파이썬
**** macOS에서의 이용
**** Windows에서의 이용
**** Ubuntu에서의 이용
**** 도커 이용
*** 파이썬 실행
**** 이 책에서 이용하는 파이썬 명령어
**** 파이썬 인터프리터의 두 가지 모드
**** 대화형 모드 인터프리터
**** 대화형 모드의 기본 사용법
**** 대화형 모드에서 자주 사용하는 내장 함수
***** type() - 객체 타입을 확인한다
***** dir() - 객체 속성을 확인한다
***** help() - 도움말 페이지를 표시한다
***** 독스트링을 이용한 도움말 페이지 작성
**** 스크립트 실행
***** 모듈을 스크립트 실행하기
**** python 명령어와 python3 명령어의 차이
*** 정리
** ch03 제어 흐름
*** 기본 문법
**** 들여쓰기를 사용한 블록 표현
***** 들여쓰기 폭
***** pass 문 - 아무런 동작도 하지 않음을 선언
**** 변수 이용
***** 타입 선언이 필요 없는 이유
**** 주석
***** 주석과 독스트링의 차이
*** 조건 분기
**** if문 - 조건을 지정해 처리를 분기함
***** 참이 되는 값, 거짓이 되는 값
***** 간단한 조건식
***** if 문에서 자주 이용하는 숫잣값 비교
***** if 문에서 자주 이용하는 객체 비교
*** 루프 - 처리 반복
**** for 문 - 엘리먼트 수만큼 처리를 반복
***** for문에서 자주 이용하는 내장 함수
***** for 문에서의 else의 동작
***** for 문에서의 변수의 스코프
**** while 문 - 조건을 지정해 처리를 반복
***** while 문에서의 else 절의 동작
**** break 문 - 루프를 벗어남
**** continue 문 - 다음 루프를 이동
*** 예외처리
**** try 문 - 예외 포착
***** except 절 - 예외가 발생했을 때만 실행함
***** else 절 - 예외가 발생하지 않았을 때만 실행함
***** finally 절 - 예외 여부와 관계 없이 반드시 실행함
**** raise 문 - 의도적으로 예외를 발생시킴
**** 사용자 예외 정의
**** with 문 - 정의한 클린업 처리를 반드시 실행함
*** 정리
** ch04 데이터 구조
*** None - 값이 존재하지 않음을 표현
**** 조건식에서의 None 이용
*** 논리값 - 참/거짓을 다룸
**** bool타입 - 논리값을 다루는 타입
**** 불 연산
***** x or y - x가 참이면 x, 그렇지 않으면 y를 반환
***** x and y - x가 참이면 y 그렇지 않으면 x를 반환
***** not x - x가 참이면 False, 그렇지 않으면 True 를 반환
*** 숫잣값
**** 숫잣값끼리의 연산
**** 숫잣값을 다루는 내장 타입
***** int 타입 - 정수를 다루는 타입
***** float 타입 - 부동소수점수를 다루는 타입
***** complex 타입 - 복소수를 다루는 타입
*** 문자열
**** str 타입 - 문자열을 다루는 타입
**** 문자열 연산
**** for 문에서의 문자열의 동작
**** 조건식에서의 문자열 이용
**** 문자열 안에서의 변수 허용
***** f-string - 식을 삽입할 수 있는 문자열 리터럴
***** format() - 인수에 전달한 변수로 문자열을 치환
***** % 연산자 - 가장 오래된 문자열 포맷
**** str 타입과 매우 비슷한 bytes 타입
***** str.encode()와 bytes.decode()를 이용한 상호 변환
***** 파이썬 2계열과 파이썬 3계열에서의 문자열의 차이
*** 배열 - 엘리먼트를 1열로 나열해서 다룸
**** list 타입 - 변경할 수 있는 배열을 다루는 타입
***** 엘리먼트 추가와 삭제
***** 인덱스를 이용한 엘리먼트로의 접근
***** 슬라이스를 이용한 리스트 추출
**** tuple 타입 - 변경할 수 없는 배열을 다루는 타입
***** 튜플 작성 시 주의점
***** 인덱스를 이용한 엘리먼트로의 접근
***** 슬라이스를 이용한 튜플 추출
***** for 문에서의 배열 동작
**** 조건식에서 이용되는 배열의 특성
**** 튜플과 리스트의 이용구분
*** 딕셔너리 - 키와 값의 세트를 다룸
**** dict 타입 - 딕셔너리를 다루는 타입
**** 엘리먼트 추가와 삭제
**** 키를 이용한 엘리먼트로의 접근
**** 키로 이용할 수 있는 객체읮 ㅗ건
**** for 문에서의 딕셔너리의 동작
**** 조건식에서 이용할 수 있는 딕셔너리의 특성
*** 집합 - 유일한 엘리먼트의 집합을 다룸
**** set 타입 - 변경할 수 있는 집합을 다루는 타입
***** 엘리먼트 추가와 삭제
**** frozenset 타입 - 변경할 수 없는 집합을 다루는 타입
**** 집합 연산 - 합집합, 교집합, 차집합, 대칭차집합
**** for 문에서의 집합의 동작
**** 조건식에서 이용할 수 있는 집합의 특성
*** 컴프리헨션 - 효율적인 시퀀스 생성
**** 리스트 컴프리헨션 - 효율적인 리스트 생성
***** 중첩된 리스트 컴프리헨션
***** if 문이 있는 컴프리헨션
**** 기타 컴프리헨션
*** 그 외 타입을 나타내는 개념
**** 가변객체 - 정의 후 값을 변경할 수 있는 객체
**** 불변객체 - 정의 후 값을 변경할 수 없는 객체
**** 컨테이너객체 - 다른 객체에 대한 참조를 가진 객체
**** 이터러블 객체 - for 문에서 이용할 수 있는 객체
**** 호출가능객체 - ()을 붙여 호출할 수 있는 객체
*** 정리
** ch05 함수
*** 함수 - 관련된 처리를 모음
**** 함수 정의와 실행
**** 인수를 받는 함수
**** 함수는 객체
**** 함수의 반환값
***** return이 없을 때의 반환값
**** 함수의 다양한 인수
***** 위치 인수 - 가인수 이름을 지정하지 않고 실인수를 전달함
***** 키워드 인수 - 가인수 이름을 지정해 실인수를 전달함
***** 기본값을 가진 인수 - 호출 시 실인수를 생략할 수 있는 인수
***** 길이가 변하는 위치 인수
***** 길이가 변하는 키워드 인수
***** 키워드만 인수로 가짐 - 호출 시 가인수 이름을 반드시 전달해야 하는 인수
***** 위치만 인수로 가짐 - 호출 시 가인수 이름을 지정할 수 없는 인수
**** 인수 리스트 언팩 - 리스트나 딕셔너리에 저장된 값을 인수로 전달
**** 함수의 독스트링
*** lambda 식 - 이름이 없는 함수 작성
**** lambda 식 정의와 실행
**** lambda 식을 사용할 위치
*** 타입 힌트
**** 타입 정보를 부여함으로써 얻을 수 있는 장점
**** 타입 정보 부여
***** 변수에 대한 타입 정보 부여
**** 타입 힌트 활용 사례 - 정적 분석 도구 이용
*** 정리
** ch06 클래스와 인스턴스
*** 파이썬의 클래스 구조
**** class 키워드를 이용한 클래스 정의
**** 인스턴스 만들기
*** 인스턴스 - 클래스를 기반으로 만들어진 객체
**** 인스턴스 메서드 - 인스턴스에 묶인 메서드
**** 인스턴스 변수 - 인스턴스가 유지하는 변수
**** 인스턴스 초기화
***** __init__() - 인스턴스 초기화를 수행하는 특수 메서드
***** 인수를 전달해 인스턴스화하기
***** __init__()과 __new__()의 ㅊ이 - 이니셜라이저와 컨스트럭터
***** __new__() 사용시 주의점
**** 프로퍼티 - 인스턴스 메서드를 인스턴스 변수와 같이 다룸
***** property - 값을 얻을 때 호출되는 메서드
***** setter - 값을 설정할 때 호출되는 메서드
**** 클래스와 인스턴스의 프라이빗 속성
***** 언더스코어로 시작하는 속성
***** 언더스코어 두 개로 시작하는 속성
***** 프라이빗 속성에 대한 파이썬 커뮤니티의 사상
*** 클래스 - 인스턴스의 모형이 되는 객체
**** 클래스 변수 - 클래스 객체가 유지하는 변수
***** 클래스 변수는 인스턴스에서도 참조 가능
**** 클래스 메서드 - 클래스에 속한 메서드
***** 스태틱 메서드 - 함수처럼 동작하는 메서드
*** 클래스 상속
**** 메서드 오버라이드와 super()를 사용한 베이스 클래스로의 접근
**** 모드 객체는 object 클래스의 서브 클래스
**** 다중상속 - 여러 베이스 클래스를 지정
**** 다중상속 시 주의점
***** __mro__ 속성을 이용한 메서드 결정 순서 확인
*** 정리
** ch07 모듈, 패키지, 이름 공간, 스코프
*** 모듈 - 코드를 기술한 .py 파일
**** 모듈 작성
**** 모듈 임포트
**** python3 명령어로 직접 실행하기
***** 인수 얻기
***** 직접 실행했을 때만 동작하는 코드
***** if __name__ == '__main__': 블록의 의미
***** 변수 __name__에 저장되는 값
*** 패키지 - 모듈의 집합
**** 패키지 작성
**** 패키지 안에 있는 모듈 임포트
***** __init__.py - 패키지 초기화 수행
***** __init__.py의 편리한 사용법
**** import 문 비교
***** import 문만을 이용한 임포트
***** from 절을 이용한 특정 속성 임포트
***** .을 사용한 상대 임포트
***** 와일드카드 문자를 이용한 여러 속성 일괄 임포트
***** as 절을 사용한 별명 부여
*** 임포트의 구조
**** 모듈 검색 흐름
**** sys.path - 모듈 검색 경로
***** 검색 경로의 우선순위
**** PyTHONPATH - sys.path에 검색 경로를 추가
*** 이름 공간과 변수의 스코프
**** 이름 공간 - 이름과 객체의 매핑
***** 이름 공간 활용
**** 스코프 - 직접 접근할 수 있는 영역
***** 로컬 스코프 - 함수 안에 국한된 스코프
***** 전역 스코프 - 모듈 최상위 레벨의 스코프
***** 빌트인 스코프 - 내장 객체의 스코프
***** 인클로징 스코프 - 현재 로컬 스코프의 1계층 바깥쪽의 스코프
*** 정리
** ch08 내장 함수와 특수 메서드
*** 내장 함수 - 항상 이용할 수 있는 함수
**** 객체 타입을 조사하는 함수
***** isinstance(), issubclass() - 동적 타입 판정
***** callable() - 객체의 호출 가능 여부 판정
**** 객체 속성에 관한 함수
***** hasattr() - 객체의 속성 유무 판정
**** getattr(), setattr(), delattr() - 객체 속성 조작
**** 이터러블 객체를 받는 함수
***** zip() - 다수의 이터러블 엘리먼트를 동시에 반환
***** sorted() - 이터러블 엘리먼트를 정렬
***** filter() - 이터러블 엘리먼트를 필터링
***** map() - 모든 엘리먼트에 함수를 적용
***** all, any() - 논릿값 반환
**** 기타 내장 함수
*** 특수메서드 - 파이썬이 암묵적으로 호출하는 특별한 메서드
**** __str__(), __repr__() - 객체를 문자열로 표현
**** __bool__() - 객체를 논릿값으로 평가함
**** __call__() - 인스턴스를 함수처럼 다룸
**** 속성으로의 동적 접근
***** __setattr__() - 속성에 대입해 호출
***** __delattr__() - 속성의 삭제로 호출
***** __getattr__(), __getattribute__() - 속성에 접근해 호출
**** 이터러블 객체로의 동작
***** __iter__() - 이터레이터 객체로 반환
***** __next__() - 다음 엘리먼트 반환
**** 컨테이너 객체로서 동작
***** __getitem__(), __setitem__() - 인덱스와 키를 사용한 조작
***** __contains__() - 객체 유무 판정
**** 기타 특수 메서드
*** 정리
** ch09 파이썬의 독특한 기능들
*** 제너레이터 - 메모리 효율이 높은 이터러블 객체
**** 제너레이터의 구체적인 예시
**** 제너레이터 구현
***** 제너레이터 함수 - 함수와 같이 작성
***** 제너레이터 식 - 컴프리헨션을 이용해 작성
***** yield from 식 - 서브 제너레이터로 처리를 이첩
**** 제너레이터 이용시 주의점
***** len() 에서 이용시
***** 여러 차례 이용시
**** 제너레이터 실제 사례 - 파일 내용 변환하기
**** 기타 이용 사례
*** 데커레이터 - 함수나 클래스명에 처리 추가
**** 데커레이터의 구체적인 예시
***** functools.lru_cache() - 함수의 결과를 캐시하는 함수 데커레이터
***** dataclass.dataclass() - 자주하는 처리를 자동으로 추가하는 클래스 데커레이터
**** 데커레이터 구현
***** 간단한 데커레이터
***** 인수를 받는 함수 데커레이터
***** 데커레이터 자체가 인수를 받는 데커레이터
***** 여러 데커레이터를 동시에 이용
***** functools.wraps()로 데커레이터 결함 해결
**** 데커레이터 실제 사례 - 처리 시간 측정
**** 기타 이용 사례
*** 콘텍스트 관리자 - with 문 앞뒤에서 처리를 실행하는 객체
**** 콘텍스트 관리자의 구체적인 예시
***** 콘텍스트 관리자 구현
***** __enter__(), __exit__() - with 문 앞 뒤에서 호출하는 메서드
***** with 문과 예외 처리
***** as 키워드 - __enter__()의 반환값을 이용
***** contextlib.contextmanager로 간단하게 구현
**** 콘텍스트 관리자 실제 사례 - 일시적인 로깅 수준 변경
**** 기타 이용 사례
*** 디스크립터 - 속성 처리를 클래스로 이첩
**** 디스크립터의 구체적인 예시
**** 디스크립터의 구현
***** __set__() 구현 - 데이터 디스크립터
***** __get__()만 구현 - 비데이터 디스크립터
**** 디스크립터 실제 사례 - 프로퍼티 캐시
**** 기타 이용사례
*** 정리
** ch10 동시처리
*** 동시 처리와 병렬 처리 - 여러 처리를 동시에 수행
**** 순차 처리 실행
**** 동시 처리 실행
**** 병렬 처리 실행
**** 파이썬과 동시 처리
***** 동시 처리와 비동기 처리의 관계
*** concurrent.futures 모듈 - 동시 처리를 위한 고수준 인터페이스
**** Future 클래스와 Executor 클래스 - 비동기 처리 캡슐화와 실행
**** ThreadPoolExecutor 클래스 - 스레드 기반 비동기 실행
***** 스레드 기반 비동기 실행이 효과적일 때
**** ThreadPoolExecutor 클래스를 이용한 다중 스레드 처리 실제 사례
***** 순차 처리 구현
***** 다중 스레드 구현
***** 다중 스레드 사용시 주의점
***** 다중 스레드에서의 동작에 문제가 발생할 때
***** 스레드 세이프한 구현
**** ProcessPoolExecutor 클래스 - 프로세스 기반 비동기 실행
***** 프로세스 기반 비동기 실행이 효과적일 때
**** ProcessPoolExecutor 클래스를 이용한 다중 프로세스 처리 구현
***** 순차 처리 구현
***** 다중 프로세스 구현
***** 다중 프로세스 주의점
***** pickle화 가능한 객체 사용
***** 난수 사용법
*** asyncio 모듈 - 이벤트 루프를 사용한 동시처리 수행
**** 코루틴 - 처리 도중에 중단, 다시 시작
***** aysnc 구문을 사용한 코루틴 구현
***** await 문을 사용한 코루틴 호출과 중단
***** 코루틴 동시 실행
**** 코루틴 스케줄링과 실행
***** 이벤트 루프 - asyncio 모듈의 핵심 구조
***** 태스크 - 스케줄링한 코루틴을 캡슐화
***** 비동기 I/O - 이벤트 루프에 적합한 I/O 처리
***** 동기 I/O를 이용하는 처리 태스크화
**** asyncio 모듈과 HTTP 통신
***** aiohttp - 비동기 I/O를 이용하는 HTTP 클라이언트 겸 서버 라이브러리
** ch11 개발 환경과 패키지 관리
*** 가상 환경 - 격리된 파이썬 실행 환경
**** venv - 가상 환경 생성 도구
***** venv의 구조
***** 가상 환경 활성화 및 비활성화
***** 가상 환경 안에서의 python 명령어
***** 가상 환경 안에서의 패키지 이용
***** 여러 프로젝트를 동시에 개발
*** 패키지 이용
**** pip - 패키지 관리 도구
***** 기본 사용법
***** 패키지 설치
***** 패키지 제거
***** PyPI - 파이썬 패키지 저장소
***** 소스 코드 저장소에 있는 패키지 설치하기
***** 로컬에 있는 패키지 설치하기
***** 설치된 패키지 업데이트하기
***** 현재 사용자용으로만 설치하기
**** 환경 저장과 재현 - requirements 파일 활용
***** requirements 파일에 현재 환경 정보 저장
***** requirements 파일에서 환경 재현
***** 개발 환경에서만 이용하는 패키지 관리
***** 의존 패키지 업데이트
*** 패키지 작성
**** setup.py - 패키지 정보를 모아둔 파일
***** 패키지 디렉터리 구성
***** setup.py 기본
***** PyPI에 등록 고려하기
***** 의존 패키지 고려하기
***** .py 이외의 파일 고려하기
**** PyPI에 패키지 등록
***** PyPI 계정 작성
***** 배포물 작성
***** 배포물 업로드
*** 정리
** ch12 단위 테스트
*** 단위 테스트 도입
**** 단일 모듈 테스트
***** 테스트 실행 명령어 간략화
**** 패키지 테스트
***** 디렉터리 구성
***** 샘플 애플리케이션 작성
*** unittest 모듈 - 표준 단위 테스트 라이브러리
**** 테스트 케이스 구현
***** 전처리 및 후처리가 필요한 테스트 케이스
**** 테스트 실행과 결과 확인
***** 테스트 실패 시의 결과
***** 테스트 실패 시의 결과 제한하기
**** 특정한 테스트만 실행하기
***** 테스트 케이스를 직접 지정
***** 테스트 디스커버리
*** unittest.mock 모듈 - 모의 객체 이용
**** 모의 객체 기본 사용법
***** 임의의 값을 반환하는 호출 가능한 객체로서 이용
***** assert 메서드로 호출 여부 테스트
**** patch 를 사용한 객체 치환
**** mock을 이용한 테스트 케이스 구현
*** 상황에 따른 테스트 케이스 구현
**** 환경에 의존하는 테스트 건너뛰기
**** 예외 발생 테스트하기
**** 다른 파라미터로 동일한 테스트 반복하기
**** 콘텍스트 관리자 테스트하기
*** 정리
** ch13 파이썬 애플리케이션 개발 실전
*** 작성할 애플리케이션
**** LGTM 이미지를 자동으로 생성하는 커맨드 라인 도구
**** 이용할 주요 외부 패키지
***** requests - HTTP 클라이언트 라이브러리
***** Click - 커맨드 라인 도구 작성 라이브러리
***** Pillow - 이미지 처리 라이브러리
*** 프로젝트 작성
**** Git 이용
***** .gitignore 파일 작성
***** GitHub에서의 소스 코드 관리
**** 패키지 모형 작성
***** lgtm 패키지 작성
***** 테스트 코드 작성
*** 지속적인 통합 도입
**** CircleCI에서의 테스트 자동화
***** 프로젝트 추가
***** config.yml 추가
**** 테스트 실행 및 결과 확인
*** 애플리케이션 개발
**** 커맨드 라인 인수 얻기
***** 이미지 소스 정보와 메시지 받기
***** 테스트 코드 수정
**** 이미지 얻기
***** 파일 경로로부터 이미지를 얻는 클래스 구현
***** URL로부터 이미지를 얻는 클래스 구현
***** 검색 키워드로부터 이미지를 얻는 클래스 구현
***** 이미지를 얻는 클래스 이용
**** 이미지 처리
***** 문자열을 이미지 위에 그리기 위한 최소한의 구현 예시
***** 문자열을 중앙에 적절한 크기로 그리기
**** 각각의 처리 호출
*** 명령어로 실행하기
**** setup.py 작성
***** entry_potins - 스크립트 인터페이스 등록을 수행하는 인수
**** 동작 확인하기
*** 정리
