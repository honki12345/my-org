* 러닝 파이썬 상편 제5판                                             :python:
** PART1 시작하기_1
*** ch01 파이썬 Q&A 세션
**** 왜 파이썬을 사용하는가?
**** 파이썬은 '스크립트 언어'인가?
**** 그렇다면 단점은 무엇인가?
**** 누가 파이썬을 사용하는가?
**** 파이썬으로 무엇을 할 수 있는가?
**** 파이썬은 어떻게 개발되고 유지되는가?
**** 파이썬의 기술적인 강점은 무엇인가?
**** 파이썬은 다른 언어와 어떻게 비교될 수 있는가?
**** 이 장의 요약
**** 학습 테스트: 퀴즈
**** 학습 테스트: 정답
*** ch02 파이썬이 프로그램을 실행하는 방법
**** 파이썬 인터프리터 소개
**** 프로그램 실행
**** 실행 모델 변형들
**** 이 장의 요약
**** 학습 테스트: 퀴즈
**** 학습 테스트: 정답
*** ch03 프로그램을 직접 실행하자
**** 대화형 프롬프트
**** 시스템 명령 라인과 파일
**** 유닉스 방식의 실행 스크립트: #!
**** 파일 아이콘 클릭하기
**** 모듈 임포트와 리로드
**** exec로 모듈 파일 실행하기
**** IDLE 사용자 인터페이스
**** 다른 IDE 도구들
**** 다른 실행 옵션
**** 어떤 옵션을 사용해야 하는가?
**** 이 장의 요약
**** 학습 테스트:
** PART2 타입과 연산
*** ch04 파이썬 객체 타입 소개
**** 파이썬의 계층 구조
**** 내장된 타입을 사용하는 이유
**** 파이썬 핵심 데이터 타입
**** 숫자
**** 문자열
***** 시퀀스 연산
***** 불변성
***** 타입별 메서드
***** 도움말 보기
***** 문자열을 작성하는 다른 방법들
***** 유니코드 문자열
***** 패턴 매칭
**** 리스트
***** 시퀀스 연산
***** 타입별 연산
***** 경계 연산
리스트의 끝을 벗어난 할당시도(접근)은 보통 에러가 발생한다
***** 중첩
***** 컴프리헨션
**** 딕셔너리
***** 매핑 연산
***** 중첩 다시보기
***** 존재하지 않는 키: if 테스트
***** 키 정렬: 루프 이용
***** 반복과 최적화
for루프와 리스트 컴프리헨션 둘 다 반복(iterable) 프로토콜을 따르는 반복(iterable)객체와 함께 동작한다
물리적으로 메모리 상에 연속적으로 저장되었거나, 반복 연산하는 문맥 안에서 한 번에 하나의 아이템을 생성하는 객체는 반복가능(iterable)하다
반복 객체는 'iter' 호출에 의해 생성되고, 'next' 호출에 의해 다음으로 진행되며, 더이상 아이템이 없을 경우 예외를 발생시킨다.
**** 튜플
***** 왜 튜플을 사용하는가?
리스트와 유사하면서 더 적은 연산을 지원하는 튜플은 왜 사용할까?
튜플의 불변성이 바로 튜플을 사용하는 이유
**** 파일
***** 바이너리 바이트 파일
***** 유니코드 텍스트 파일
***** 파일과 유사한 다른 도구들
**** 그 외의 코어 타입
***** 코드의 유연성을 깨트리는 방법
***** 사용자 정의 클래스
***** 그 외의 모든 것
**** 이 장의 요약
지금까지 살펴본 기본 데이터 타입을 요약해 보자.
이 장은 파이썬 코어 객체 타입과 이 타입에 적용할 수 있는 연산의 종류에 대한 간략한 소개를 제공한다.
우리는 이 장에서 메서드 호출로 이용할 수 있는 특정 타입별 연산(예: 문자열 분할과 리스트 추가)뿐만 아니라, 다양한 객체 타입에 대해 동작하는 일반적인 연산(예: 인덱싱 그리고 슬라이싱과 같은 시퀀스 연산)에 대해 배웠다.
그리고 불변성, 시퀀스, 그리고 다형성과 같은 몇가지 중요한 용어들에 대해서도 정의했다.
이 장을 통해 파이썬의 코어 객체 타입이 C와 같은 저수준 언어에서 제공하는 기본 타입들보다 더욱 유연하고 강력하다는 것을 알 수 있었다.
예를 들어, 파이썬의 리스트와 딕셔너리는 저수준 언어에서 컬렉션과 검색을 제공하기 위해 여러분이 해야만 하는 일들을 모두 대신 처리해준다.
리스트는 다른 객체들의 정렬된 컬렉션이며, 딕셔너리는 위치가 아닌 키를 사용하여 인덱스되는 다른 객체들의 컬렉션이다.
딕셔너리와 리스트 둘 모두 중첩될 수 있고, 필요에 따라 크기를 늘리거나 줄일 수도 있으며, 어떠한 타입이라도 포함할 수 있다.
게다가 이 객체들의 메모리 공간은 이 객체를 더이상 사용하지 않을 때 자동으로 해제된다.
또한 다양한 종류의 바이너리 및 텍스트 데이터를 지원하기 위해 문자열과 파일이 서로 긴밀하게 동작하는 것을 살펴보았다.

이 장에서는 많은 내용을 빠르게 살펴보기 위해 상세한 내용은 생략했으므로 이 장에서 다룬 것만으로 충분히 이해했다고 생각해서는 안된다.
다음 몇 개의 장에서는 좀 더 깊이 있는 내용을 다루기 시작할 것이다.
그리고 이 장에서 생략한 파이썬 코어 객체 타입의 상세한 내용과 더욱 깊은 이해를 제공할 예정이다.
다음 장에서는 파이썬에서 숫자에 대해 심도있게 살펴보는 것으로 시작한다.
**** 학습 테스트:
***** 1. 파이썬의 핵심 데이터 타입 중 네 개를 말해보자
일반적으로 숫자, 문자열, 리스트, 딕셔너리, 튜플, 파일, 그리고 집합이 코어 객체 타입으로 간주된다.
때로는 타입(type), None, 그리고 부울(Boolean) 또한 코어 타입으로 분류되기도 한다.
다양한 숫자 타입(정수, 부동소수점, 복소수, 분수, 소수)과 문자열 타입(파이썬 3.X에서는 텍스트 문자열과 바이트 문자열)이 있다.
***** 2. 이 타입들이 왜 '핵심' 데이터 타입이라고 불리는가?
이 타입들은 파이썬 언어의 일부이며, 항상 이용할 수 있기 때문에 핵심 타입으로 알려져 있다.
다른 객체를 생성할 경우에는 일반적으로 임포트된 모듈 안에 있는 함수를 호출해야 한다.
코어 타입은 대부분이 객체를 생성하기 위한 특별한 구분을 가지고 있다.
예를 들어, 'spam'은 문자열을 만들고, 해당 문자열에 적용할 수 있는 연산의 집합을 결정하는 표현식이다.
이 때문에 코어 타입은 파이썬 구문에 포함되어 있다.
반대로, 파일 객체를 만들기 위해서는 내장된 open 함수를 호출해야 한다
***** 3. 불변은 무엇을 의미하고 파이썬에서 불변 타입으로 간주되는 세 가지 타입은 무엇인가?
불변객체는 생성된 후에 변경할 수 없는 객체를 말한다.
파이썬에서 숫자, 문자열 그리고 튜플이 이 범주에 포함된다.
불변 객체를 직접 변경할 수는 없지만, 표현식을 사용하면 항상 새로운 객체를 만들 수 있다.
최신 파이썬에서 제공되는 바이트 배열을 이용하면 텍스트를 변경할 수도 있지만 이는 일반적인 문자열이 아니며, 단순한 8비트 문자로 된 텍스트만 직접적으로 적용된다 (예: 아스키)
***** 4. 시퀀스는 무엇을 의미하고 이 분류에 포함되는 세 가지 타입은 무엇인가?
시퀀스는 위치적으로 정렬된 객체의 컬렉션이다.
파이썬에서 문자열, 리스트, 튜플이 시퀀스에 해당된다.
이들은 인덱싱, 연결, 슬라이싱과 같은 공통의 시퀀스 연산을 공유하지만 각각의 타입별 메서드 호출을 가지고 있다.
관련된 용어인 반복객체(iterable)은 요청 시에 시퀀스의 아이템을 생성하는 물리적인 시퀀스, 또는 가상의 시퀀스를 의미한다
***** 5. 매핑은 무엇을 의미하고 코어 타입 중에 매핑에 해당하는 것은 무엇인가?
매핑이라는 용어는 연관된 값으로 연결하는 객체를 말한다.
파이썬의 딕셔너리는 코어 타입중에서 유일한 매핑 타입이다.
매핑은 왼쪽에서 오른쪽으로 향하는 어떤 위치적인 순서를 제공하지 않으며, 키에 의해 저장된 데이터의 접근과 추가적인 타입별 메서드 호출을 제공한다
***** 6. 다형성은 어떤 의미이고 왜 신경을 써야만 하는가?
다형성은 연산의 대상이 되는 객체에 따라 연산의 의미가 달라질 수 있다는 의미다.
다형성은 파이썬 내부에 숨겨진 파이썬의 핵심 개념이다. (코드가 특정 타입에 제한적이지 않도록 함으로써 코드가 자동으로 다양한 타입에 적용되도록 한다)
*** ch05 숫자타입
**** 숫자 타입의 기본
**** 숫자의 동작
**** 다른 숫자 타입
**** 숫자의 확장
**** 이 장의 요약
**** 학습 테스트:
*** ch06 동적 타입 변환
**** 사라진 선언문
**** 공유 참조
**** 동적 타입 변환은 어디에나 존재
**** 이 장의 요약
**** 학습 테스트:
*** ch07 문자열의 기본
**** 이 장의 범위
**** 문자열의 기초
**** 문자열 리터럴
**** 문자열의 실제 동작
**** 문자열 메서드
**** 문자열 포매팅 표현식
**** 문자열 포매팅 메서드 호출
**** 일반적인 타입 분류
**** 이 장의 요약
**** 학습 테스트:
*** ch08 리스트와 딕셔너리
**** 리스트
**** 리스트의 실제 동작
**** 딕셔너리
**** 딕셔너리의 동작
**** 이 장의 요약
**** 학습 테스트:
*** ch09 튜플, 파일 그리고 그 외의 모든 것
**** 튜플
**** 파일
**** 코어 타입의 복습과 요약
**** 내장 타입 사용시 주으 사항
**** 이 장의 요약
**** 학습 테스트:
** PART3 문과 구문
*** ch10 파이썬 문 소개
**** 파이썬 설계 개념 계층 구조 다시보기
**** 파이썬의 문
**** 두 if 이야기
**** 빠른 예제: 대화형 루프
**** 이 장의 요약
**** 학습 테스트:
*** ch11 할당, 표현식, 그리고 출력
**** 할당문
**** 표현식문
**** 출력 연산들
**** 이 장의 요약
**** 학습테스트:
*** ch12 if 테스트와 규칙
**** if 문
**** 파이썬 구문 다시보기
**** 진릿값과 부울 테스트
**** if/else 삼중 표현식
**** 이 장의 요약
**** 학습 테스트
*** ch13 while과 for 루프
**** while 루프
**** break, continue, pass 그리고 루프 else
**** for 루프
**** 루프 코딩 기법/기술
**** 이 장의 요약
**** 학습 테스트:
*** ch14 반복과 컴프리헨션
**** 루프: 처음보기
**** 리스트 컴프리헨션: 최초의 상세한 설명
**** 다른 반복 상황들
**** 파이썬 3.X에서 새로운 반복 객체들
**** 다른 반복 주제들
**** 이 장의 요약
**** 학습 테스트:
*** ch15 문서화
**** 파이썬 문서화 소스들
**** 일반적인 코딩 시 주의사항
**** 이 장의 요약
**** 학습 테스트:
** PART4 함수와 제너레이터
*** ch16 함수의 기본
**** 왜 함수를 사용하는가?
**** 함수 코딩하기
**** 첫 번째 예제: 정의와 호출
**** 두 번째 예제: 시퀀스의 교집합 구하기
**** 이 장의 요약
**** 학습 테스트:
*** ch17 범위
**** 파이썬 범위의 기본
**** global문
**** 범위와 중첩 함수
**** 3.X 에서의 nonlocal문
**** 왜 nonlocal인가? 상태 유지 방법들
**** 이 장의 요약
**** 학습 테스트:
*** ch18 인수
**** 인수 - 전달 방식의 기본
**** 특별한 인수 매칭 모드
**** 최솟값 구하기
**** 일반화된 집합 함수들
**** 파이썬 3.X의 print 함수 흉내내기
**** 이 장의 요약
**** 학습 테스트:
*** ch19 고급 함수 주제들
**** 함수 설계 개념
**** 재귀 함수
**** 함수 객체: 속성과 어노테이션
**** 익명 함수: 람다
**** 함수형 프로그래밍 도구
**** 이 장의 요약
**** 학습 테스트:
*** ch20 컴프리헨션과 제너레이터
**** 리스트 컴프리헨션과 함수형 도구들
**** 제너레이터 함수와 제너레이터 표현식
**** 컴프리헨션 구문 요약
**** 이 장의 요약
**** 학습 테스트:
*** ch21 벤치마킹
**** 반복 도구들의 성능 측정
**** timeit을 이용한 반복과 파이썬 성능 측정
**** 다른 벤치마킹 주제: pystone
**** 함수 주의 사항
**** 이 장의 요약
**** 학습 테스트:
** PART5 모듈과 패키지
*** ch22 모듈: 개요
**** 왜 모듈을 사용하는가?
**** 파이썬 프로그램 아키텍처
**** 임포트 작동방식
**** 바이트 코드 파일: 파이썬 3.2+에서의 '__pycache__'
**** 모듈 검색 경로
**** 이 장의 요약
**** 학습 테스트:
*** ch23 모듈 코딩 기초
**** 모듈 생성
**** 모듈 사용법
**** 모듈 네임스페이스
**** 모듈 리로드하기
**** 이 장의 요약
**** 학습 테스트:
*** ch24 모듈 패키지
**** 패키지 임포트 기초
**** 패키지 임포트 예제
**** 왜 패키지 임포트를 사용하는가?
**** 패키지에 상대적인 임포트
**** 파이썬 3.3 네임스페이스 패키지
**** 이 장의 요약
**** 학습 테스트:
*** ch25 모듈 심화 학습
**** 모듈 설계 개념
**** 모듈에 데이터 숨기기
**** 이후 버전의 언어 특징을 활성화시키기: '__future__'
**** 복합 사용모드: '__name__'과 '__main__'
**** 예제: 이중 모드 코드
**** 모듈 검색 경로 변경
**** import 와 from 에 대한 as 확장
**** 예제: 모듈은 객체
**** 이름 문자열로 모듈을 임포트하기
**** 예제: 이행적 모듈 리로드
**** 모듈 관련 주의사항
**** 이 장의 요약
**** 학습 테스트:
