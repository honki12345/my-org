* C 기초 플러스
** 준비
*** C의 역사
C언어는 현장 프로그래머들을 위한 도구로서 개발되었다
- 현장에서 요구하는 실용적 유용성
*** C가 인기 있는 이유는?
**** 설계상의 특징
C는 하향식 설계(top-down), 구조화 프로그래밍, 모듈화 설계를 쉽게 적용할 수 있는 환경을 제공
**** 효율성
C는 컴퓨터의 성능을 최대한 활용할 수 있도록 설계되었다
- 프로그램 실행 속도를 최대로 높이고, 메모리를 가장 효율적으로 사용
**** 이식성
C는 이식성이 좋은 언어이다
- 한 시스템에서 작성한 C 프로그램을 다른 시스템으로 가져갔을 때 약간만 수정하거나 전혀 수정하지 않고도 실행할 수 있다는 뜻
- 여러 시스템에 맞는 C 컴파일러를 쉽게 구할 수 있다
**** 강력함과 유연성
C는 강력하고 유연하다
C는 프로그래머에게 더 많은 자유를 허용하지만 그 자유에 대한 책임도 부여하고 있음
- 유연성: 프로그래머가 할 수 있는 제한이 덜 엄격
  - 실수도 쉽게 저지를 수 있음
- 강력함: 복잡한 작업도 매우 간단하게 처리
**** 단점
자유에 따르는 책임
- 포인터의 사용으로 추적하기 어려운 프로그래밍 에러를 유발할 수 있음

풍부한 연산자들과 간결성이 결합되면 이해하기 어려운 코드를 양성함
*** C의 미래는?
*** 컴퓨터는 어떻게 동작하는가?
*** 고수준 언어와 컴파일러
*** 언어 표준
**** C99 표준
**** C11 표준
*** C를 활용하는 일곱 단계
**** 1: 프로그램 목적 정의
**** 2: 프로그램 설계
**** 3: 코드 작성
**** 4: 컴파일
**** 5: 프로그램 실행
**** 6: 테스트 및 디버깅
**** 7: 유지보수
**** 논평
*** 프로그램 제작 과정
**** 오브젝트 코드 파일, 실행 파일, 라이브러리
**** Unix 시스템
*** GNU 컴파일러 컬렉션과 LLVM 프로젝트
**** Linux 시스템
**** PC에서의 명령행 컴파일러
**** 통합개발환경(Window)
**** Windows/Linux 옵션
**** 매킨토시에서의 C
*** 이 책의 구성
*** 이 책의 표기 규약
**** 서체
**** 프로그램 출력
**** 특별한 구성 요소
*** 요약
*** 복습문제
*** 프로그래밍 연습
