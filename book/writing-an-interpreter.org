* 밑바닥부터 만드는 인터프리터 in go
** Introduction
인터프리터는 소스코드를 입력받아 눈에 보이는 생성물(중간 결과물)을 만들지 않은 채 코드를 평가한다
컴파일러는 소스코드를 입력받아 기반 시스템이 이해할 수 있는 또 다른 언어로 결과물을 만든다

*** 트리탐색(tree-walking) 인터프리터
- 소스코드를 파싱하고 나서 추상구문트리(AST, Abstract Syntax Tree)를 만들고, 이것을 평가하는 인터프리터

*** Monkey 프로그래밍 언어와 인터프리터
모든 인터프리터는 특정 프로그래밍 언어를 '해석(interpret)' 하기 위해 만들어진다
그것이 프로그래밍 언어를 '구현'하는 방법이다
컴파일러나 인터프리터가 없는 프로그래밍 언어는 실현되지 않은 생각이거나 구현 명세에 불과하다

인터프리터는 REPL에서 입력으로 받는 모든 소스코드를 토큰화하고 파싱하면서, 코드를 추상구문트리라고 부르는 내부 표현으로 만들고 그 트리를 평가할 것이다

인터프리터
- 렉서
- 파서
- 추상구문트리
- 내부객체시스템
- 평가기
** 렉싱
** 파싱
** 평가
