* 백엔드를 위한 GO 프로그래밍
** 소개
*** 왜 Go 인가요?
**** Go의 설계 목표는 무엇인가요?
Go는 구글이 마주한 많은 문제의 해결책으로 주목받기 시작했습니다.
*컴파일러 측면*에서 예를 들어 보자면, 대부분의 컴파일러가 구글의 대규모 코드베이스를 *적당한 시간 안에* 컴파일 하지 못했습니다

Go의 설계 목표
- 대규모 코드 베이스를 최대한 빠르게 처리할 수 있는 컴파일러 만들기
- 최적화를 활용하여 빠르게 코드를 생성할 수 있는 컴파일러 만들기

Go의 특징
- 코드 문법에 굉장히 엄격합니다
  - e.g. 쓰지 않는 변수와 임포트는 경고가 아니라 오류를 발생시킵니다
- 컴파일러 구조가 매우 간단합니다
  - e.g. Go 최적화의 대부분은 어셈블리 코드에서 이루어집니다
  - 어셈블리는 텍스트 형태로의 중간 과정 없이 바이너리 형태로 생성됩니다
**** 어디서 Go를 활용할 수 있을까요?
**** Go 컴파일러와 런타임
메모리를 수동으로 관리하고 포인터를 직접 다루는 C의 레벨까지 내려가거나 이 모든 것을 추상화하여 Go가 처리하도록 할 수 있습니다
**** 동시성
고루틴:
운영체제가 아닌 Go의 런타임에서 처리되는 초경량의 유사 스레드 실행환경

채널:
고루틴끼리 고성능으로 커뮤니케이션 하기 위해 Go에서는 "채널"을 이용합니다
채널은 서로의 소통을 매우 쉽고 빠르게 만들어 주는 역할을 합니다
** 빠르게 시작하기
*** Go 설치하기
**** 시스템 패키지 매니저를 이용하여 설치하기
**** 미리 컴파일된 바이너리 이용하기
**** 소스코드로 Go 빌드하기
*** Go 기본 개념
**** 일반적인 프로젝트 구조
Go패키지:
Go패키지는 단일 소스코드 파일로서 확장자를 제외한 파일명이 패키지 이름이 됩니다

레이아웃:
| 프로젝트 루트와 관련된 경로 | 목적                                                                                                           |
|--------------------------+----------------------------------------------------------------------------------------------------------------|
| /vendor                  | 이 디렉터리는 프로젝트의 종속성을 저장합니다                                                                         |
| /internal                | 이 디렉터리는 다른 사람들이 사용하지 않기를 바라는 코드를 위한 공간입니다                                               |
| go.mod                   | 프로젝트 폴더의 최상위에 위치하는 "Go 모듈 파일"이라고 하는 이 파일은 코드의 "패키지"에서 동일하게 유지되는 정보를 저장합니다 |
| go.sum                   | 특정 모듈 버전의 콘텐츠 관련 암호화 해시 정보가 포함되어 있습니다                                                      |

토큰:
| break     | struct      | range    |
|-----------+-------------+----------|
| default   | chan        | type     |
| func      | else        | continue |
| interface | goto        | for      |
| select    | package     | import   |
| case      | switch      | return   |
| defer     | const       | var      |
| go        | fallthrough |          |
| map       | if          |          |

**** Go의 시작 "Hello, World!"
**** 변수
Go는 강타입(strongly typed)인 동시에 정적타입(statically typed) 언어
- Go의 컴파일러는 변수의 타입을 자동으로 변환하지 않습니다
  - e.g. 32비트를 64비트 정수로 형변환하는 것도 사용자가 명시적으로 작성해야 합니다

Go에서는 접근제어를 위해 첫 글자의 대소문자로 'public'과 'private' 여부를 결정합니다
- 대문자는 'public', 소문자는 'private'
**** if 문 그리고 switch 문
**** 반복문
**** 함수
**** 구조체
**** 인터페이스
**** 오류
** Go 모듈
*** 빌트인 패키지 사용하기
*** 서드파티 패키지 사용하기
**** 저 소수인가요? 1
*** 직접 만든 패키지 빌드하기
**** 저 소수인가요? 2
** 빌트인 패키지 사용하기
*** 일반적인 데이터 구조와 알고리즘
*** 다익스트라 길찾기
*** 콘웨이의 라이프 게임
*** 작업 증명 1
** 동시성
*** 동시성, 스레드, 그리고 병렬성
*** 고루틴
*** 채널
**** select 문
*** 작업 증명 2
** 상호 호환성
*** 상호 호환성이 중요한 이유는 무엇일까요?
*** C 코드와 상호 호환하기
*** Swift와 상호 호환하기
