* 코드스피츠 79 ES6+ 디자인패턴과 뷰패턴
[[https://youtu.be/LB3OvN8ctso?feature=shared]]

** 1회차
전달해줄 수 있는 것
- 자극을 받고, 공부를 해야겠다 => 모티베이션 발동
- 지식전달? 2시간으로는 힘듬

*** 워밍업 ES2015+, HTML5
객체지향에서 중요한건 어떻게 *사용*하지?
- 호스트 위주의 개발
- 내부 구현이 중요한게 코드가 어떤 역할을 수행하는지 초점을 맞춘다
  - 즉, 어떻게 쓰지? 를 먼저 고민
---
클래스의 구현방법, 클래스를 어떻게 설계할지 고민하는게 아니라
클래스의 인스턴스를 어떻게 쓰고 있지?
- 객체지향의 의미는 만들어진 인스턴스를 어떻게 쓰고있느냐
- 즉, 먼저 인스턴스를 만들고 사용처에 알맞게 그만큼만 기능을 추가한다
---
역할에 맞게 메서드를 분리하는 '센스'

두 개의 역할이 변화율에 따라 다른지?
- 애초부터 코드를 분산해서 관리하는 이유는? 변화에 대응할려고 하기 때문
- 변화가 일어날 타이밍에 맞게 고친다
- load() 함수를 고치는 타이밍과 render() 함수를 고치는 타이밍이 일치하는가?
  - 나는 render()를 언제 수정하지? table로 그리다가 다른걸로 그리고 싶을 때, load를 수정하는거랑은 다르다
---
생성자의 첫번째 전략: 검증

---
런타임 언어는 컴파일 타임에 에러가 나지 않기 때문에
런타임에 throw 하는거 말고는 방법이 없다
이때가 아니면 오염이 전파되어서 다양한 양상이 일어난다
즉 런타임언어의 기본적인 전략은 throw다
- 프로덕션에서는 throw를 감싼 error 함수를 쓰다가 production 모드에서는 console.log로 작동하고 development 모드에서는 throw
